package com.viktormykhailiv.kmp.health.records

import com.viktormykhailiv.kmp.health.HealthDataType
import com.viktormykhailiv.kmp.health.HealthDataType.Power
import com.viktormykhailiv.kmp.health.SeriesRecord
import com.viktormykhailiv.kmp.health.records.metadata.Metadata
import com.viktormykhailiv.kmp.health.units.Power as PowerUnit
import kotlin.time.Instant

/**
 * Captures the power generated by the user, e.g. during cycling or rowing with a power meter. Each
 * record represents a series of measurements.
 */
data class PowerRecord(
    override val startTime: Instant,
    override val endTime: Instant,
    override val samples: List<Sample>,
    override val metadata: Metadata,
) : SeriesRecord<PowerRecord.Sample> {

    override val dataType: HealthDataType = Power

    init {
        require(startTime <= endTime) { "startTime must be before endTime." }
    }

    /**
     * Represents a single measurement of power. For example, using a power meter when exercising on
     * a stationary bike.
     *
     * @param time The point in time when the measurement was taken.
     * @param power Power generated, in [Power] unit. Valid range: 0-100000 Watts.
     * @see PowerRecord
     */
    data class Sample(
        val time: Instant,
        val power: PowerUnit,
    ) {
        init {
            require(power.inWatts >= 0 && power.inWatts <= 100000) { "power must be 0-100000." }
        }
    }
}
