// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <HealthKMP:health>
final enum class com.viktormykhailiv.kmp.health.records/MealType : kotlin/Enum<com.viktormykhailiv.kmp.health.records/MealType> { // com.viktormykhailiv.kmp.health.records/MealType|null[0]
    enum entry Breakfast // com.viktormykhailiv.kmp.health.records/MealType.Breakfast|null[0]
    enum entry Dinner // com.viktormykhailiv.kmp.health.records/MealType.Dinner|null[0]
    enum entry Lunch // com.viktormykhailiv.kmp.health.records/MealType.Lunch|null[0]
    enum entry Snack // com.viktormykhailiv.kmp.health.records/MealType.Snack|null[0]

    final val entries // com.viktormykhailiv.kmp.health.records/MealType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<com.viktormykhailiv.kmp.health.records/MealType> // com.viktormykhailiv.kmp.health.records/MealType.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): com.viktormykhailiv.kmp.health.records/MealType // com.viktormykhailiv.kmp.health.records/MealType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<com.viktormykhailiv.kmp.health.records/MealType> // com.viktormykhailiv.kmp.health.records/MealType.values|values#static(){}[0]
}

final enum class com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference : kotlin/Enum<com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference> { // com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference|null[0]
    enum entry Celsius // com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference.Celsius|null[0]
    enum entry Fahrenheit // com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference.Fahrenheit|null[0]

    final val entries // com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference> // com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference // com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference> // com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference.values|values#static(){}[0]
}

abstract interface <#A: out kotlin/Any> com.viktormykhailiv.kmp.health/SeriesRecord : com.viktormykhailiv.kmp.health/IntervalRecord { // com.viktormykhailiv.kmp.health/SeriesRecord|null[0]
    abstract val samples // com.viktormykhailiv.kmp.health/SeriesRecord.samples|{}samples[0]
        abstract fun <get-samples>(): kotlin.collections/List<#A> // com.viktormykhailiv.kmp.health/SeriesRecord.samples.<get-samples>|<get-samples>(){}[0]
}

abstract interface com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health/HealthAggregatedRecord|null[0]
    abstract val dataType // com.viktormykhailiv.kmp.health/HealthAggregatedRecord.dataType|{}dataType[0]
        abstract fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health/HealthAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
}

abstract interface com.viktormykhailiv.kmp.health/HealthManager { // com.viktormykhailiv.kmp.health/HealthManager|null[0]
    abstract fun isAvailable(): kotlin/Result<kotlin/Boolean> // com.viktormykhailiv.kmp.health/HealthManager.isAvailable|isAvailable(){}[0]
    abstract suspend fun aggregate(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health/HealthDataType): kotlin/Result<com.viktormykhailiv.kmp.health/HealthAggregatedRecord> // com.viktormykhailiv.kmp.health/HealthManager.aggregate|aggregate(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.HealthDataType){}[0]
    abstract suspend fun getRegionalPreferences(): kotlin/Result<com.viktormykhailiv.kmp.health.region/RegionalPreferences> // com.viktormykhailiv.kmp.health/HealthManager.getRegionalPreferences|getRegionalPreferences(){}[0]
    abstract suspend fun isAuthorized(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>, kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>): kotlin/Result<kotlin/Boolean> // com.viktormykhailiv.kmp.health/HealthManager.isAuthorized|isAuthorized(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>;kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>){}[0]
    abstract suspend fun isRevokeAuthorizationSupported(): kotlin/Result<kotlin/Boolean> // com.viktormykhailiv.kmp.health/HealthManager.isRevokeAuthorizationSupported|isRevokeAuthorizationSupported(){}[0]
    abstract suspend fun readData(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health/HealthDataType): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthRecord>> // com.viktormykhailiv.kmp.health/HealthManager.readData|readData(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.HealthDataType){}[0]
    abstract suspend fun requestAuthorization(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>, kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>): kotlin/Result<kotlin/Boolean> // com.viktormykhailiv.kmp.health/HealthManager.requestAuthorization|requestAuthorization(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>;kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>){}[0]
    abstract suspend fun revokeAuthorization(): kotlin/Result<kotlin/Unit> // com.viktormykhailiv.kmp.health/HealthManager.revokeAuthorization|revokeAuthorization(){}[0]
    abstract suspend fun writeData(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthRecord>): kotlin/Result<kotlin/Unit> // com.viktormykhailiv.kmp.health/HealthManager.writeData|writeData(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthRecord>){}[0]
}

abstract interface com.viktormykhailiv.kmp.health/HealthRecord { // com.viktormykhailiv.kmp.health/HealthRecord|null[0]
    abstract val dataType // com.viktormykhailiv.kmp.health/HealthRecord.dataType|{}dataType[0]
        abstract fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health/HealthRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    abstract val metadata // com.viktormykhailiv.kmp.health/HealthRecord.metadata|{}metadata[0]
        abstract fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health/HealthRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
}

abstract interface com.viktormykhailiv.kmp.health/InstantaneousRecord : com.viktormykhailiv.kmp.health/HealthRecord { // com.viktormykhailiv.kmp.health/InstantaneousRecord|null[0]
    abstract val time // com.viktormykhailiv.kmp.health/InstantaneousRecord.time|{}time[0]
        abstract fun <get-time>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health/InstantaneousRecord.time.<get-time>|<get-time>(){}[0]
}

abstract interface com.viktormykhailiv.kmp.health/IntervalRecord : com.viktormykhailiv.kmp.health/HealthRecord { // com.viktormykhailiv.kmp.health/IntervalRecord|null[0]
    abstract val endTime // com.viktormykhailiv.kmp.health/IntervalRecord.endTime|{}endTime[0]
        abstract fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health/IntervalRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    abstract val startTime // com.viktormykhailiv.kmp.health/IntervalRecord.startTime|{}startTime[0]
        abstract fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health/IntervalRecord.startTime.<get-startTime>|<get-startTime>(){}[0]
}

sealed interface com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType|null[0]
    final object ChestStrap : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.ChestStrap|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.ChestStrap.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.ChestStrap.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.ChestStrap.toString|toString(){}[0]
    }

    final object FitnessBand : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.FitnessBand|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.FitnessBand.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.FitnessBand.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.FitnessBand.toString|toString(){}[0]
    }

    final object HeadMounted : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.HeadMounted|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.HeadMounted.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.HeadMounted.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.HeadMounted.toString|toString(){}[0]
    }

    final object Phone : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Phone|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Phone.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Phone.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Phone.toString|toString(){}[0]
    }

    final object Ring : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Ring|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Ring.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Ring.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Ring.toString|toString(){}[0]
    }

    final object Scale : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Scale|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Scale.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Scale.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Scale.toString|toString(){}[0]
    }

    final object SmartDisplay : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.SmartDisplay|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.SmartDisplay.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.SmartDisplay.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.SmartDisplay.toString|toString(){}[0]
    }

    final object Unknown : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Unknown|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Unknown.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Unknown.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Unknown.toString|toString(){}[0]
    }

    final object Watch : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Watch|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Watch.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Watch.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Watch.toString|toString(){}[0]
    }
}

sealed interface com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType|null[0]
    final object Badminton : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Badminton|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Badminton.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Badminton.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Badminton.toString|toString(){}[0]
    }

    final object Baseball : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Baseball|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Baseball.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Baseball.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Baseball.toString|toString(){}[0]
    }

    final object Basketball : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Basketball|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Basketball.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Basketball.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Basketball.toString|toString(){}[0]
    }

    final object Biking : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Biking|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Biking.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Biking.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Biking.toString|toString(){}[0]
    }

    final object BikingStationary : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.BikingStationary|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.BikingStationary.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.BikingStationary.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.BikingStationary.toString|toString(){}[0]
    }

    final object BootCamp : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.BootCamp|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.BootCamp.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.BootCamp.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.BootCamp.toString|toString(){}[0]
    }

    final object Boxing : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Boxing|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Boxing.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Boxing.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Boxing.toString|toString(){}[0]
    }

    final object Calisthenics : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Calisthenics|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Calisthenics.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Calisthenics.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Calisthenics.toString|toString(){}[0]
    }

    final object Cricket : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Cricket|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Cricket.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Cricket.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Cricket.toString|toString(){}[0]
    }

    final object Dancing : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Dancing|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Dancing.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Dancing.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Dancing.toString|toString(){}[0]
    }

    final object Elliptical : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Elliptical|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Elliptical.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Elliptical.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Elliptical.toString|toString(){}[0]
    }

    final object ExerciseClass : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.ExerciseClass|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.ExerciseClass.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.ExerciseClass.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.ExerciseClass.toString|toString(){}[0]
    }

    final object Fencing : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Fencing|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Fencing.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Fencing.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Fencing.toString|toString(){}[0]
    }

    final object FootballAmerican : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.FootballAmerican|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.FootballAmerican.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.FootballAmerican.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.FootballAmerican.toString|toString(){}[0]
    }

    final object FootballAustralian : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.FootballAustralian|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.FootballAustralian.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.FootballAustralian.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.FootballAustralian.toString|toString(){}[0]
    }

    final object FrisbeeDisc : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.FrisbeeDisc|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.FrisbeeDisc.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.FrisbeeDisc.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.FrisbeeDisc.toString|toString(){}[0]
    }

    final object Golf : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Golf|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Golf.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Golf.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Golf.toString|toString(){}[0]
    }

    final object GuidedBreathing : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.GuidedBreathing|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.GuidedBreathing.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.GuidedBreathing.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.GuidedBreathing.toString|toString(){}[0]
    }

    final object Gymnastics : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Gymnastics|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Gymnastics.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Gymnastics.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Gymnastics.toString|toString(){}[0]
    }

    final object Handball : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Handball|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Handball.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Handball.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Handball.toString|toString(){}[0]
    }

    final object HighIntensityIntervalTraining : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.HighIntensityIntervalTraining|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.HighIntensityIntervalTraining.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.HighIntensityIntervalTraining.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.HighIntensityIntervalTraining.toString|toString(){}[0]
    }

    final object Hiking : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Hiking|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Hiking.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Hiking.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Hiking.toString|toString(){}[0]
    }

    final object IceHockey : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.IceHockey|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.IceHockey.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.IceHockey.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.IceHockey.toString|toString(){}[0]
    }

    final object IceSkating : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.IceSkating|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.IceSkating.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.IceSkating.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.IceSkating.toString|toString(){}[0]
    }

    final object MartialArts : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.MartialArts|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.MartialArts.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.MartialArts.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.MartialArts.toString|toString(){}[0]
    }

    final object OtherWorkout : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.OtherWorkout|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.OtherWorkout.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.OtherWorkout.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.OtherWorkout.toString|toString(){}[0]
    }

    final object Paddling : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Paddling|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Paddling.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Paddling.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Paddling.toString|toString(){}[0]
    }

    final object Paragliding : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Paragliding|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Paragliding.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Paragliding.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Paragliding.toString|toString(){}[0]
    }

    final object Pilates : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Pilates|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Pilates.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Pilates.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Pilates.toString|toString(){}[0]
    }

    final object Racquetball : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Racquetball|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Racquetball.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Racquetball.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Racquetball.toString|toString(){}[0]
    }

    final object RockClimbing : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.RockClimbing|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.RockClimbing.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.RockClimbing.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.RockClimbing.toString|toString(){}[0]
    }

    final object RollerHockey : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.RollerHockey|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.RollerHockey.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.RollerHockey.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.RollerHockey.toString|toString(){}[0]
    }

    final object Rowing : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Rowing|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Rowing.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Rowing.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Rowing.toString|toString(){}[0]
    }

    final object RowingMachine : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.RowingMachine|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.RowingMachine.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.RowingMachine.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.RowingMachine.toString|toString(){}[0]
    }

    final object Rugby : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Rugby|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Rugby.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Rugby.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Rugby.toString|toString(){}[0]
    }

    final object Running : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Running|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Running.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Running.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Running.toString|toString(){}[0]
    }

    final object RunningTreadmill : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.RunningTreadmill|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.RunningTreadmill.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.RunningTreadmill.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.RunningTreadmill.toString|toString(){}[0]
    }

    final object Sailing : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Sailing|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Sailing.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Sailing.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Sailing.toString|toString(){}[0]
    }

    final object ScubaDiving : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.ScubaDiving|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.ScubaDiving.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.ScubaDiving.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.ScubaDiving.toString|toString(){}[0]
    }

    final object Skating : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Skating|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Skating.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Skating.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Skating.toString|toString(){}[0]
    }

    final object Skiing : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Skiing|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Skiing.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Skiing.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Skiing.toString|toString(){}[0]
    }

    final object Snowboarding : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Snowboarding|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Snowboarding.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Snowboarding.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Snowboarding.toString|toString(){}[0]
    }

    final object Snowshoeing : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Snowshoeing|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Snowshoeing.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Snowshoeing.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Snowshoeing.toString|toString(){}[0]
    }

    final object Soccer : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Soccer|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Soccer.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Soccer.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Soccer.toString|toString(){}[0]
    }

    final object Softball : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Softball|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Softball.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Softball.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Softball.toString|toString(){}[0]
    }

    final object Squash : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Squash|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Squash.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Squash.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Squash.toString|toString(){}[0]
    }

    final object StairClimbing : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.StairClimbing|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.StairClimbing.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.StairClimbing.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.StairClimbing.toString|toString(){}[0]
    }

    final object StairClimbingMachine : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.StairClimbingMachine|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.StairClimbingMachine.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.StairClimbingMachine.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.StairClimbingMachine.toString|toString(){}[0]
    }

    final object StrengthTraining : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.StrengthTraining|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.StrengthTraining.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.StrengthTraining.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.StrengthTraining.toString|toString(){}[0]
    }

    final object Stretching : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Stretching|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Stretching.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Stretching.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Stretching.toString|toString(){}[0]
    }

    final object Surfing : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Surfing|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Surfing.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Surfing.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Surfing.toString|toString(){}[0]
    }

    final object SwimmingOpenWater : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.SwimmingOpenWater|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.SwimmingOpenWater.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.SwimmingOpenWater.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.SwimmingOpenWater.toString|toString(){}[0]
    }

    final object SwimmingPool : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.SwimmingPool|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.SwimmingPool.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.SwimmingPool.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.SwimmingPool.toString|toString(){}[0]
    }

    final object TableTennis : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.TableTennis|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.TableTennis.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.TableTennis.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.TableTennis.toString|toString(){}[0]
    }

    final object Tennis : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Tennis|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Tennis.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Tennis.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Tennis.toString|toString(){}[0]
    }

    final object Volleyball : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Volleyball|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Volleyball.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Volleyball.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Volleyball.toString|toString(){}[0]
    }

    final object Walking : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Walking|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Walking.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Walking.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Walking.toString|toString(){}[0]
    }

    final object WaterPolo : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.WaterPolo|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.WaterPolo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.WaterPolo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.WaterPolo.toString|toString(){}[0]
    }

    final object Weightlifting : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Weightlifting|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Weightlifting.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Weightlifting.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Weightlifting.toString|toString(){}[0]
    }

    final object Wheelchair : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Wheelchair|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Wheelchair.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Wheelchair.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Wheelchair.toString|toString(){}[0]
    }

    final object Yoga : com.viktormykhailiv.kmp.health.records/ExerciseType { // com.viktormykhailiv.kmp.health.records/ExerciseType.Yoga|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseType.Yoga.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseType.Yoga.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseType.Yoga.toString|toString(){}[0]
    }
}

sealed interface com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType|null[0]
    final object Awake : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Awake|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Awake.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Awake.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Awake.toString|toString(){}[0]
    }

    final object AwakeInBed : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.AwakeInBed|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.AwakeInBed.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.AwakeInBed.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.AwakeInBed.toString|toString(){}[0]
    }

    final object Deep : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Deep|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Deep.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Deep.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Deep.toString|toString(){}[0]
    }

    final object Light : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Light|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Light.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Light.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Light.toString|toString(){}[0]
    }

    final object OutOfBed : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.OutOfBed|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.OutOfBed.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.OutOfBed.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.OutOfBed.toString|toString(){}[0]
    }

    final object REM : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.REM|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.REM.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.REM.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.REM.toString|toString(){}[0]
    }

    final object Sleeping : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Sleeping|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Sleeping.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Sleeping.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Sleeping.toString|toString(){}[0]
    }

    final object Unknown : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Unknown|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Unknown.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Unknown.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Unknown.toString|toString(){}[0]
    }
}

sealed interface com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType|null[0]
    final class Exercise : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.Exercise|null[0]
        constructor <init>(kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...) // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.<init>|<init>(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]

        final val activeEnergyBurned // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.activeEnergyBurned|{}activeEnergyBurned[0]
            final fun <get-activeEnergyBurned>(): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.activeEnergyBurned.<get-activeEnergyBurned>|<get-activeEnergyBurned>(){}[0]
        final val cyclingPower // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.cyclingPower|{}cyclingPower[0]
            final fun <get-cyclingPower>(): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.cyclingPower.<get-cyclingPower>|<get-cyclingPower>(){}[0]
        final val cyclingSpeed // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.cyclingSpeed|{}cyclingSpeed[0]
            final fun <get-cyclingSpeed>(): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.cyclingSpeed.<get-cyclingSpeed>|<get-cyclingSpeed>(){}[0]
        final val distanceWalkingRunning // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.distanceWalkingRunning|{}distanceWalkingRunning[0]
            final fun <get-distanceWalkingRunning>(): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.distanceWalkingRunning.<get-distanceWalkingRunning>|<get-distanceWalkingRunning>(){}[0]
        final val flightsClimbed // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.flightsClimbed|{}flightsClimbed[0]
            final fun <get-flightsClimbed>(): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.flightsClimbed.<get-flightsClimbed>|<get-flightsClimbed>(){}[0]
        final val runningSpeed // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.runningSpeed|{}runningSpeed[0]
            final fun <get-runningSpeed>(): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.runningSpeed.<get-runningSpeed>|<get-runningSpeed>(){}[0]

        final fun component1(): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.component1|component1(){}[0]
        final fun component2(): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.component2|component2(){}[0]
        final fun component3(): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.component3|component3(){}[0]
        final fun component4(): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.component4|component4(){}[0]
        final fun component5(): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.component5|component5(){}[0]
        final fun component6(): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.component6|component6(){}[0]
        final fun copy(kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): com.viktormykhailiv.kmp.health/HealthDataType.Exercise // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.copy|copy(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.Exercise.toString|toString(){}[0]
    }

    final object BloodGlucose : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.BloodGlucose|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.BloodGlucose.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.BloodGlucose.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.BloodGlucose.toString|toString(){}[0]
    }

    final object BloodPressure : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.BloodPressure|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.BloodPressure.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.BloodPressure.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.BloodPressure.toString|toString(){}[0]
    }

    final object BodyFat : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.BodyFat|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.BodyFat.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.BodyFat.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.BodyFat.toString|toString(){}[0]
    }

    final object BodyTemperature : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.BodyTemperature|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.BodyTemperature.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.BodyTemperature.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.BodyTemperature.toString|toString(){}[0]
    }

    final object CyclingPedalingCadence : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.CyclingPedalingCadence|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.CyclingPedalingCadence.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.CyclingPedalingCadence.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.CyclingPedalingCadence.toString|toString(){}[0]
    }

    final object HeartRate : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.HeartRate|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.HeartRate.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.HeartRate.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.HeartRate.toString|toString(){}[0]
    }

    final object Height : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.Height|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Height.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.Height.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.Height.toString|toString(){}[0]
    }

    final object LeanBodyMass : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.LeanBodyMass|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.LeanBodyMass.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.LeanBodyMass.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.LeanBodyMass.toString|toString(){}[0]
    }

    final object Power : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.Power|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Power.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.Power.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.Power.toString|toString(){}[0]
    }

    final object Sleep : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.Sleep|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Sleep.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.Sleep.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.Sleep.toString|toString(){}[0]
    }

    final object Steps : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.Steps|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Steps.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.Steps.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.Steps.toString|toString(){}[0]
    }

    final object Weight : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.Weight|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Weight.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.Weight.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.Weight.toString|toString(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/BloodGlucose, com.viktormykhailiv.kmp.health.units/BloodGlucose, com.viktormykhailiv.kmp.health.units/BloodGlucose) // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.BloodGlucose;com.viktormykhailiv.kmp.health.units.BloodGlucose;com.viktormykhailiv.kmp.health.units.BloodGlucose){}[0]

    final val avg // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.avg|{}avg[0]
        final fun <get-avg>(): com.viktormykhailiv.kmp.health.units/BloodGlucose // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val max // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.max|{}max[0]
        final fun <get-max>(): com.viktormykhailiv.kmp.health.units/BloodGlucose // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.max.<get-max>|<get-max>(){}[0]
    final val min // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.min|{}min[0]
        final fun <get-min>(): com.viktormykhailiv.kmp.health.units/BloodGlucose // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.min.<get-min>|<get-min>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.units/BloodGlucose // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.units/BloodGlucose // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.component4|component4(){}[0]
    final fun component5(): com.viktormykhailiv.kmp.health.units/BloodGlucose // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.component5|component5(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/BloodGlucose = ..., com.viktormykhailiv.kmp.health.units/BloodGlucose = ..., com.viktormykhailiv.kmp.health.units/BloodGlucose = ...): com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.BloodGlucose;com.viktormykhailiv.kmp.health.units.BloodGlucose;com.viktormykhailiv.kmp.health.units.BloodGlucose){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord, com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord) // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.aggregate.BloodPressureAggregatedRecord.AggregatedRecord;com.viktormykhailiv.kmp.health.aggregate.BloodPressureAggregatedRecord.AggregatedRecord){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val diastolic // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.diastolic|{}diastolic[0]
        final fun <get-diastolic>(): com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.diastolic.<get-diastolic>|<get-diastolic>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]
    final val systolic // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.systolic|{}systolic[0]
        final fun <get-systolic>(): com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.systolic.<get-systolic>|<get-systolic>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.component4|component4(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord = ..., com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord = ...): com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.aggregate.BloodPressureAggregatedRecord.AggregatedRecord;com.viktormykhailiv.kmp.health.aggregate.BloodPressureAggregatedRecord.AggregatedRecord){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.toString|toString(){}[0]

    final class AggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord|null[0]
        constructor <init>(com.viktormykhailiv.kmp.health.units/Pressure, com.viktormykhailiv.kmp.health.units/Pressure, com.viktormykhailiv.kmp.health.units/Pressure) // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.<init>|<init>(com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.units.Pressure){}[0]

        final val avg // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.avg|{}avg[0]
            final fun <get-avg>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
        final val max // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.max|{}max[0]
            final fun <get-max>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.max.<get-max>|<get-max>(){}[0]
        final val min // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.min|{}min[0]
            final fun <get-min>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.min.<get-min>|<get-min>(){}[0]

        final fun component1(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.component1|component1(){}[0]
        final fun component2(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.component2|component2(){}[0]
        final fun component3(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.component3|component3(){}[0]
        final fun copy(com.viktormykhailiv.kmp.health.units/Pressure = ..., com.viktormykhailiv.kmp.health.units/Pressure = ..., com.viktormykhailiv.kmp.health.units/Pressure = ...): com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.copy|copy(com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.units.Pressure){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.toString|toString(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/Percentage, com.viktormykhailiv.kmp.health.units/Percentage, com.viktormykhailiv.kmp.health.units/Percentage) // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Percentage;com.viktormykhailiv.kmp.health.units.Percentage;com.viktormykhailiv.kmp.health.units.Percentage){}[0]

    final val avg // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.avg|{}avg[0]
        final fun <get-avg>(): com.viktormykhailiv.kmp.health.units/Percentage // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val max // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.max|{}max[0]
        final fun <get-max>(): com.viktormykhailiv.kmp.health.units/Percentage // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.max.<get-max>|<get-max>(){}[0]
    final val min // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.min|{}min[0]
        final fun <get-min>(): com.viktormykhailiv.kmp.health.units/Percentage // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.min.<get-min>|<get-min>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.units/Percentage // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.units/Percentage // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.component4|component4(){}[0]
    final fun component5(): com.viktormykhailiv.kmp.health.units/Percentage // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.component5|component5(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/Percentage = ..., com.viktormykhailiv.kmp.health.units/Percentage = ..., com.viktormykhailiv.kmp.health.units/Percentage = ...): com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Percentage;com.viktormykhailiv.kmp.health.units.Percentage;com.viktormykhailiv.kmp.health.units.Percentage){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/Temperature, com.viktormykhailiv.kmp.health.units/Temperature, com.viktormykhailiv.kmp.health.units/Temperature) // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Temperature;com.viktormykhailiv.kmp.health.units.Temperature;com.viktormykhailiv.kmp.health.units.Temperature){}[0]

    final val avg // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.avg|{}avg[0]
        final fun <get-avg>(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val max // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.max|{}max[0]
        final fun <get-max>(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.max.<get-max>|<get-max>(){}[0]
    final val min // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.min|{}min[0]
        final fun <get-min>(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.min.<get-min>|<get-min>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.component4|component4(){}[0]
    final fun component5(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.component5|component5(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/Temperature = ..., com.viktormykhailiv.kmp.health.units/Temperature = ..., com.viktormykhailiv.kmp.health.units/Temperature = ...): com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Temperature;com.viktormykhailiv.kmp.health.units.Temperature;com.viktormykhailiv.kmp.health.units.Temperature){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, kotlin/Double, kotlin/Double, kotlin/Double) // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;kotlin.Double;kotlin.Double;kotlin.Double){}[0]

    final val avg // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.avg|{}avg[0]
        final fun <get-avg>(): kotlin/Double // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val max // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.max|{}max[0]
        final fun <get-max>(): kotlin/Double // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.max.<get-max>|<get-max>(){}[0]
    final val min // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.min|{}min[0]
        final fun <get-min>(): kotlin/Double // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.min.<get-min>|<get-min>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.component2|component2(){}[0]
    final fun component3(): kotlin/Double // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.component3|component3(){}[0]
    final fun component4(): kotlin/Double // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.component4|component4(){}[0]
    final fun component5(): kotlin/Double // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.component5|component5(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., kotlin/Double = ..., kotlin/Double = ..., kotlin/Double = ...): com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;kotlin.Double;kotlin.Double;kotlin.Double){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, kotlin/Long, kotlin/Long, kotlin/Long) // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;kotlin.Long;kotlin.Long;kotlin.Long){}[0]

    final val avg // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.avg|{}avg[0]
        final fun <get-avg>(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val max // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.max|{}max[0]
        final fun <get-max>(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.max.<get-max>|<get-max>(){}[0]
    final val min // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.min|{}min[0]
        final fun <get-min>(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.min.<get-min>|<get-min>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.component2|component2(){}[0]
    final fun component3(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.component3|component3(){}[0]
    final fun component4(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.component4|component4(){}[0]
    final fun component5(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.component5|component5(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ...): com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;kotlin.Long;kotlin.Long;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/Length, com.viktormykhailiv.kmp.health.units/Length, com.viktormykhailiv.kmp.health.units/Length) // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Length;com.viktormykhailiv.kmp.health.units.Length;com.viktormykhailiv.kmp.health.units.Length){}[0]

    final val avg // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.avg|{}avg[0]
        final fun <get-avg>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val max // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.max|{}max[0]
        final fun <get-max>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.max.<get-max>|<get-max>(){}[0]
    final val min // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.min|{}min[0]
        final fun <get-min>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.min.<get-min>|<get-min>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.component4|component4(){}[0]
    final fun component5(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.component5|component5(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/Length = ..., com.viktormykhailiv.kmp.health.units/Length = ..., com.viktormykhailiv.kmp.health.units/Length = ...): com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Length;com.viktormykhailiv.kmp.health.units.Length;com.viktormykhailiv.kmp.health.units.Length){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/Mass, com.viktormykhailiv.kmp.health.units/Mass, com.viktormykhailiv.kmp.health.units/Mass) // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.units.Mass){}[0]

    final val avg // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.avg|{}avg[0]
        final fun <get-avg>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val max // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.max|{}max[0]
        final fun <get-max>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.max.<get-max>|<get-max>(){}[0]
    final val min // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.min|{}min[0]
        final fun <get-min>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.min.<get-min>|<get-min>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.component4|component4(){}[0]
    final fun component5(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.component5|component5(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/Mass = ..., com.viktormykhailiv.kmp.health.units/Mass = ..., com.viktormykhailiv.kmp.health.units/Mass = ...): com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.units.Mass){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/Power, com.viktormykhailiv.kmp.health.units/Power, com.viktormykhailiv.kmp.health.units/Power) // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Power;com.viktormykhailiv.kmp.health.units.Power;com.viktormykhailiv.kmp.health.units.Power){}[0]

    final val avg // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.avg|{}avg[0]
        final fun <get-avg>(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val max // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.max|{}max[0]
        final fun <get-max>(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.max.<get-max>|<get-max>(){}[0]
    final val min // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.min|{}min[0]
        final fun <get-min>(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.min.<get-min>|<get-min>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.component4|component4(){}[0]
    final fun component5(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.component5|component5(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/Power = ..., com.viktormykhailiv.kmp.health.units/Power = ..., com.viktormykhailiv.kmp.health.units/Power = ...): com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Power;com.viktormykhailiv.kmp.health.units.Power;com.viktormykhailiv.kmp.health.units.Power){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, kotlin.time/Duration) // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;kotlin.time.Duration){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]
    final val totalDuration // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.totalDuration|{}totalDuration[0]
        final fun <get-totalDuration>(): kotlin.time/Duration // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.totalDuration.<get-totalDuration>|<get-totalDuration>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.component2|component2(){}[0]
    final fun component3(): kotlin.time/Duration // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.component3|component3(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., kotlin.time/Duration = ...): com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;kotlin.time.Duration){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, kotlin/Long) // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;kotlin.Long){}[0]

    final val count // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.count|{}count[0]
        final fun <get-count>(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.count.<get-count>|<get-count>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.component2|component2(){}[0]
    final fun component3(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.component3|component3(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., kotlin/Long = ...): com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/Mass, com.viktormykhailiv.kmp.health.units/Mass, com.viktormykhailiv.kmp.health.units/Mass) // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.units.Mass){}[0]

    final val avg // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.avg|{}avg[0]
        final fun <get-avg>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val max // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.max|{}max[0]
        final fun <get-max>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.max.<get-max>|<get-max>(){}[0]
    final val min // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.min|{}min[0]
        final fun <get-min>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.min.<get-min>|<get-min>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.component4|component4(){}[0]
    final fun component5(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.component5|component5(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/Mass = ..., com.viktormykhailiv.kmp.health.units/Mass = ..., com.viktormykhailiv.kmp.health.units/Mass = ...): com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.units.Mass){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.records.metadata/Device { // com.viktormykhailiv.kmp.health.records.metadata/Device|null[0]
    constructor <init>(com.viktormykhailiv.kmp.health.records.metadata/DeviceType, kotlin/String? = ..., kotlin/String? = ...) // com.viktormykhailiv.kmp.health.records.metadata/Device.<init>|<init>(com.viktormykhailiv.kmp.health.records.metadata.DeviceType;kotlin.String?;kotlin.String?){}[0]

    final val manufacturer // com.viktormykhailiv.kmp.health.records.metadata/Device.manufacturer|{}manufacturer[0]
        final fun <get-manufacturer>(): kotlin/String? // com.viktormykhailiv.kmp.health.records.metadata/Device.manufacturer.<get-manufacturer>|<get-manufacturer>(){}[0]
    final val model // com.viktormykhailiv.kmp.health.records.metadata/Device.model|{}model[0]
        final fun <get-model>(): kotlin/String? // com.viktormykhailiv.kmp.health.records.metadata/Device.model.<get-model>|<get-model>(){}[0]
    final val type // com.viktormykhailiv.kmp.health.records.metadata/Device.type|{}type[0]
        final fun <get-type>(): com.viktormykhailiv.kmp.health.records.metadata/DeviceType // com.viktormykhailiv.kmp.health.records.metadata/Device.type.<get-type>|<get-type>(){}[0]

    final fun component1(): com.viktormykhailiv.kmp.health.records.metadata/DeviceType // com.viktormykhailiv.kmp.health.records.metadata/Device.component1|component1(){}[0]
    final fun component2(): kotlin/String? // com.viktormykhailiv.kmp.health.records.metadata/Device.component2|component2(){}[0]
    final fun component3(): kotlin/String? // com.viktormykhailiv.kmp.health.records.metadata/Device.component3|component3(){}[0]
    final fun copy(com.viktormykhailiv.kmp.health.records.metadata/DeviceType = ..., kotlin/String? = ..., kotlin/String? = ...): com.viktormykhailiv.kmp.health.records.metadata/Device // com.viktormykhailiv.kmp.health.records.metadata/Device.copy|copy(com.viktormykhailiv.kmp.health.records.metadata.DeviceType;kotlin.String?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/Device.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/Device.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/Device.toString|toString(){}[0]

    final object Companion // com.viktormykhailiv.kmp.health.records.metadata/Device.Companion|null[0]
}

final class com.viktormykhailiv.kmp.health.records.metadata/Metadata { // com.viktormykhailiv.kmp.health.records.metadata/Metadata|null[0]
    final val device // com.viktormykhailiv.kmp.health.records.metadata/Metadata.device|{}device[0]
        final fun <get-device>(): com.viktormykhailiv.kmp.health.records.metadata/Device? // com.viktormykhailiv.kmp.health.records.metadata/Metadata.device.<get-device>|<get-device>(){}[0]
    final val id // com.viktormykhailiv.kmp.health.records.metadata/Metadata.id|{}id[0]
        final fun <get-id>(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/Metadata.id.<get-id>|<get-id>(){}[0]
    final val recordingMethod // com.viktormykhailiv.kmp.health.records.metadata/Metadata.recordingMethod|{}recordingMethod[0]
        final fun <get-recordingMethod>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod // com.viktormykhailiv.kmp.health.records.metadata/Metadata.recordingMethod.<get-recordingMethod>|<get-recordingMethod>(){}[0]

    final fun component1(): com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod // com.viktormykhailiv.kmp.health.records.metadata/Metadata.component1|component1(){}[0]
    final fun component2(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/Metadata.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.records.metadata/Device? // com.viktormykhailiv.kmp.health.records.metadata/Metadata.component3|component3(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/Metadata.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/Metadata.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/Metadata.toString|toString(){}[0]

    sealed interface RecordingMethod { // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod|null[0]
        final object AutoRecorded : com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod { // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.AutoRecorded|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.AutoRecorded.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.AutoRecorded.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.AutoRecorded.toString|toString(){}[0]
        }

        final object ManualEntry : com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod { // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.ManualEntry|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.ManualEntry.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.ManualEntry.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.ManualEntry.toString|toString(){}[0]
        }

        final object Unknown : com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod { // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.Unknown|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.Unknown.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.Unknown.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.Unknown.toString|toString(){}[0]
        }
    }

    final object Companion { // com.viktormykhailiv.kmp.health.records.metadata/Metadata.Companion|null[0]
        final fun autoRecorded(kotlin/String = ..., com.viktormykhailiv.kmp.health.records.metadata/Device): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records.metadata/Metadata.Companion.autoRecorded|autoRecorded(kotlin.String;com.viktormykhailiv.kmp.health.records.metadata.Device){}[0]
        final fun manualEntry(kotlin/String = ..., com.viktormykhailiv.kmp.health.records.metadata/Device? = ...): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records.metadata/Metadata.Companion.manualEntry|manualEntry(kotlin.String;com.viktormykhailiv.kmp.health.records.metadata.Device?){}[0]
        final fun unknownRecordingMethod(kotlin/String = ..., com.viktormykhailiv.kmp.health.records.metadata/Device? = ...): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records.metadata/Metadata.Companion.unknownRecordingMethod|unknownRecordingMethod(kotlin.String;com.viktormykhailiv.kmp.health.records.metadata.Device?){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord : com.viktormykhailiv.kmp.health/InstantaneousRecord { // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord|null[0]
    constructor <init>(kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/BloodGlucose, com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource?, com.viktormykhailiv.kmp.health.records/MealType?, com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal?, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.<init>|<init>(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.BloodGlucose;com.viktormykhailiv.kmp.health.records.BloodGlucoseRecord.SpecimenSource?;com.viktormykhailiv.kmp.health.records.MealType?;com.viktormykhailiv.kmp.health.records.BloodGlucoseRecord.RelationToMeal?;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val level // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.level|{}level[0]
        final fun <get-level>(): com.viktormykhailiv.kmp.health.units/BloodGlucose // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.level.<get-level>|<get-level>(){}[0]
    final val mealType // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.mealType|{}mealType[0]
        final fun <get-mealType>(): com.viktormykhailiv.kmp.health.records/MealType? // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.mealType.<get-mealType>|<get-mealType>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val relationToMeal // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.relationToMeal|{}relationToMeal[0]
        final fun <get-relationToMeal>(): com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal? // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.relationToMeal.<get-relationToMeal>|<get-relationToMeal>(){}[0]
    final val specimenSource // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.specimenSource|{}specimenSource[0]
        final fun <get-specimenSource>(): com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource? // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.specimenSource.<get-specimenSource>|<get-specimenSource>(){}[0]
    final val time // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.time|{}time[0]
        final fun <get-time>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.time.<get-time>|<get-time>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.component1|component1(){}[0]
    final fun component2(): com.viktormykhailiv.kmp.health.units/BloodGlucose // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource? // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.records/MealType? // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.component4|component4(){}[0]
    final fun component5(): com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal? // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.component5|component5(){}[0]
    final fun component6(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.component6|component6(){}[0]
    final fun copy(kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/BloodGlucose = ..., com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource? = ..., com.viktormykhailiv.kmp.health.records/MealType? = ..., com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal? = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.copy|copy(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.BloodGlucose;com.viktormykhailiv.kmp.health.records.BloodGlucoseRecord.SpecimenSource?;com.viktormykhailiv.kmp.health.records.MealType?;com.viktormykhailiv.kmp.health.records.BloodGlucoseRecord.RelationToMeal?;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.toString|toString(){}[0]

    final enum class RelationToMeal : kotlin/Enum<com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal> { // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal|null[0]
        enum entry AfterMeal // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal.AfterMeal|null[0]
        enum entry BeforeMeal // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal.BeforeMeal|null[0]
        enum entry Fasting // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal.Fasting|null[0]
        enum entry General // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal.General|null[0]

        final val entries // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal> // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal> // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.RelationToMeal.values|values#static(){}[0]
    }

    final enum class SpecimenSource : kotlin/Enum<com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource> { // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource|null[0]
        enum entry CapillaryBlood // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource.CapillaryBlood|null[0]
        enum entry InterstitialFluid // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource.InterstitialFluid|null[0]
        enum entry Plasma // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource.Plasma|null[0]
        enum entry Serum // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource.Serum|null[0]
        enum entry Tears // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource.Tears|null[0]
        enum entry WholeBlood // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource.WholeBlood|null[0]

        final val entries // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource> // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource> // com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord.SpecimenSource.values|values#static(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.records/BloodPressureRecord : com.viktormykhailiv.kmp.health/InstantaneousRecord { // com.viktormykhailiv.kmp.health.records/BloodPressureRecord|null[0]
    constructor <init>(kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/Pressure, com.viktormykhailiv.kmp.health.units/Pressure, com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition?, com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation?, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.<init>|<init>(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.records.BloodPressureRecord.BodyPosition?;com.viktormykhailiv.kmp.health.records.BloodPressureRecord.MeasurementLocation?;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val bodyPosition // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.bodyPosition|{}bodyPosition[0]
        final fun <get-bodyPosition>(): com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition? // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.bodyPosition.<get-bodyPosition>|<get-bodyPosition>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val diastolic // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.diastolic|{}diastolic[0]
        final fun <get-diastolic>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.diastolic.<get-diastolic>|<get-diastolic>(){}[0]
    final val measurementLocation // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.measurementLocation|{}measurementLocation[0]
        final fun <get-measurementLocation>(): com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation? // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.measurementLocation.<get-measurementLocation>|<get-measurementLocation>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val systolic // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.systolic|{}systolic[0]
        final fun <get-systolic>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.systolic.<get-systolic>|<get-systolic>(){}[0]
    final val time // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.time|{}time[0]
        final fun <get-time>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.time.<get-time>|<get-time>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.component1|component1(){}[0]
    final fun component2(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition? // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.component4|component4(){}[0]
    final fun component5(): com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation? // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.component5|component5(){}[0]
    final fun component6(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.component6|component6(){}[0]
    final fun copy(kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/Pressure = ..., com.viktormykhailiv.kmp.health.units/Pressure = ..., com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition? = ..., com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation? = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/BloodPressureRecord // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.copy|copy(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.records.BloodPressureRecord.BodyPosition?;com.viktormykhailiv.kmp.health.records.BloodPressureRecord.MeasurementLocation?;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.toString|toString(){}[0]

    final enum class BodyPosition : kotlin/Enum<com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition> { // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition|null[0]
        enum entry LyingDown // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.LyingDown|null[0]
        enum entry Reclining // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.Reclining|null[0]
        enum entry SittingDown // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.SittingDown|null[0]
        enum entry StandingUp // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.StandingUp|null[0]

        final val entries // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition> // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition> // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.values|values#static(){}[0]
    }

    final enum class MeasurementLocation : kotlin/Enum<com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation> { // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation|null[0]
        enum entry LeftUpperArm // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.LeftUpperArm|null[0]
        enum entry LeftWrist // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.LeftWrist|null[0]
        enum entry RightUpperArm // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.RightUpperArm|null[0]
        enum entry RightWrist // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.RightWrist|null[0]

        final val entries // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation> // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation> // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.values|values#static(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.records/BodyFatRecord : com.viktormykhailiv.kmp.health/InstantaneousRecord { // com.viktormykhailiv.kmp.health.records/BodyFatRecord|null[0]
    constructor <init>(kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/Percentage, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/BodyFatRecord.<init>|<init>(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Percentage;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/BodyFatRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/BodyFatRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/BodyFatRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/BodyFatRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val percentage // com.viktormykhailiv.kmp.health.records/BodyFatRecord.percentage|{}percentage[0]
        final fun <get-percentage>(): com.viktormykhailiv.kmp.health.units/Percentage // com.viktormykhailiv.kmp.health.records/BodyFatRecord.percentage.<get-percentage>|<get-percentage>(){}[0]
    final val time // com.viktormykhailiv.kmp.health.records/BodyFatRecord.time|{}time[0]
        final fun <get-time>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/BodyFatRecord.time.<get-time>|<get-time>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/BodyFatRecord.component1|component1(){}[0]
    final fun component2(): com.viktormykhailiv.kmp.health.units/Percentage // com.viktormykhailiv.kmp.health.records/BodyFatRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/BodyFatRecord.component3|component3(){}[0]
    final fun copy(kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/Percentage = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/BodyFatRecord // com.viktormykhailiv.kmp.health.records/BodyFatRecord.copy|copy(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Percentage;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/BodyFatRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/BodyFatRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/BodyFatRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord : com.viktormykhailiv.kmp.health/InstantaneousRecord { // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord|null[0]
    constructor <init>(kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/Temperature, com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation?, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.<init>|<init>(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Temperature;com.viktormykhailiv.kmp.health.records.BodyTemperatureRecord.MeasurementLocation?;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val measurementLocation // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.measurementLocation|{}measurementLocation[0]
        final fun <get-measurementLocation>(): com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation? // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.measurementLocation.<get-measurementLocation>|<get-measurementLocation>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val temperature // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.temperature|{}temperature[0]
        final fun <get-temperature>(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.temperature.<get-temperature>|<get-temperature>(){}[0]
    final val time // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.time|{}time[0]
        final fun <get-time>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.time.<get-time>|<get-time>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.component1|component1(){}[0]
    final fun component2(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation? // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.component4|component4(){}[0]
    final fun copy(kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/Temperature = ..., com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation? = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.copy|copy(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Temperature;com.viktormykhailiv.kmp.health.records.BodyTemperatureRecord.MeasurementLocation?;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.toString|toString(){}[0]

    final enum class MeasurementLocation : kotlin/Enum<com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation> { // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation|null[0]
        enum entry Armpit // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation.Armpit|null[0]
        enum entry Ear // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation.Ear|null[0]
        enum entry Finger // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation.Finger|null[0]
        enum entry Forehead // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation.Forehead|null[0]
        enum entry Mouth // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation.Mouth|null[0]
        enum entry Rectum // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation.Rectum|null[0]
        enum entry TemporalArtery // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation.TemporalArtery|null[0]
        enum entry Toe // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation.Toe|null[0]
        enum entry Vagina // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation.Vagina|null[0]
        enum entry Wrist // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation.Wrist|null[0]

        final val entries // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation> // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation> // com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord.MeasurementLocation.values|values#static(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord : com.viktormykhailiv.kmp.health/SeriesRecord<com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample> { // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, kotlin.collections/List<com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample>, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.CyclingPedalingCadenceRecord.Sample>;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val samples // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.samples|{}samples[0]
        final fun <get-samples>(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample> // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.samples.<get-samples>|<get-samples>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample> // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.component4|component4(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., kotlin.collections/List<com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample> = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.CyclingPedalingCadenceRecord.Sample>;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.toString|toString(){}[0]

    final class Sample { // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample|null[0]
        constructor <init>(kotlin.time/Instant, kotlin/Double) // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample.<init>|<init>(kotlin.time.Instant;kotlin.Double){}[0]

        final val revolutionsPerMinute // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample.revolutionsPerMinute|{}revolutionsPerMinute[0]
            final fun <get-revolutionsPerMinute>(): kotlin/Double // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample.revolutionsPerMinute.<get-revolutionsPerMinute>|<get-revolutionsPerMinute>(){}[0]
        final val time // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample.time|{}time[0]
            final fun <get-time>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample.time.<get-time>|<get-time>(){}[0]

        final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample.component1|component1(){}[0]
        final fun component2(): kotlin/Double // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample.component2|component2(){}[0]
        final fun copy(kotlin.time/Instant = ..., kotlin/Double = ...): com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample.copy|copy(kotlin.time.Instant;kotlin.Double){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord.Sample.toString|toString(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.records/ExerciseLap { // com.viktormykhailiv.kmp.health.records/ExerciseLap|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/Length? = ...) // com.viktormykhailiv.kmp.health.records/ExerciseLap.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Length?){}[0]

    final val endTime // com.viktormykhailiv.kmp.health.records/ExerciseLap.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/ExerciseLap.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val length // com.viktormykhailiv.kmp.health.records/ExerciseLap.length|{}length[0]
        final fun <get-length>(): com.viktormykhailiv.kmp.health.units/Length? // com.viktormykhailiv.kmp.health.records/ExerciseLap.length.<get-length>|<get-length>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.records/ExerciseLap.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/ExerciseLap.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/ExerciseLap.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/ExerciseLap.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.units/Length? // com.viktormykhailiv.kmp.health.records/ExerciseLap.component3|component3(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/Length? = ...): com.viktormykhailiv.kmp.health.records/ExerciseLap // com.viktormykhailiv.kmp.health.records/ExerciseLap.copy|copy(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Length?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseLap.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseLap.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseLap.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.records/ExerciseRoute { // com.viktormykhailiv.kmp.health.records/ExerciseRoute|null[0]
    constructor <init>(kotlin.collections/List<com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location>) // com.viktormykhailiv.kmp.health.records/ExerciseRoute.<init>|<init>(kotlin.collections.List<com.viktormykhailiv.kmp.health.records.ExerciseRoute.Location>){}[0]

    final val route // com.viktormykhailiv.kmp.health.records/ExerciseRoute.route|{}route[0]
        final fun <get-route>(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location> // com.viktormykhailiv.kmp.health.records/ExerciseRoute.route.<get-route>|<get-route>(){}[0]

    final fun component1(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location> // com.viktormykhailiv.kmp.health.records/ExerciseRoute.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location> = ...): com.viktormykhailiv.kmp.health.records/ExerciseRoute // com.viktormykhailiv.kmp.health.records/ExerciseRoute.copy|copy(kotlin.collections.List<com.viktormykhailiv.kmp.health.records.ExerciseRoute.Location>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseRoute.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseRoute.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseRoute.toString|toString(){}[0]

    final class Location { // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location|null[0]
        constructor <init>(kotlin.time/Instant, kotlin/Double, kotlin/Double, com.viktormykhailiv.kmp.health.units/Length? = ..., com.viktormykhailiv.kmp.health.units/Length? = ..., com.viktormykhailiv.kmp.health.units/Length? = ...) // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.<init>|<init>(kotlin.time.Instant;kotlin.Double;kotlin.Double;com.viktormykhailiv.kmp.health.units.Length?;com.viktormykhailiv.kmp.health.units.Length?;com.viktormykhailiv.kmp.health.units.Length?){}[0]

        final val altitude // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.altitude|{}altitude[0]
            final fun <get-altitude>(): com.viktormykhailiv.kmp.health.units/Length? // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.altitude.<get-altitude>|<get-altitude>(){}[0]
        final val horizontalAccuracy // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.horizontalAccuracy|{}horizontalAccuracy[0]
            final fun <get-horizontalAccuracy>(): com.viktormykhailiv.kmp.health.units/Length? // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.horizontalAccuracy.<get-horizontalAccuracy>|<get-horizontalAccuracy>(){}[0]
        final val latitude // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.latitude|{}latitude[0]
            final fun <get-latitude>(): kotlin/Double // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.latitude.<get-latitude>|<get-latitude>(){}[0]
        final val longitude // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.longitude|{}longitude[0]
            final fun <get-longitude>(): kotlin/Double // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.longitude.<get-longitude>|<get-longitude>(){}[0]
        final val time // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.time|{}time[0]
            final fun <get-time>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.time.<get-time>|<get-time>(){}[0]
        final val verticalAccuracy // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.verticalAccuracy|{}verticalAccuracy[0]
            final fun <get-verticalAccuracy>(): com.viktormykhailiv.kmp.health.units/Length? // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.verticalAccuracy.<get-verticalAccuracy>|<get-verticalAccuracy>(){}[0]

        final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.component1|component1(){}[0]
        final fun component2(): kotlin/Double // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.component2|component2(){}[0]
        final fun component3(): kotlin/Double // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.component3|component3(){}[0]
        final fun component4(): com.viktormykhailiv.kmp.health.units/Length? // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.component4|component4(){}[0]
        final fun component5(): com.viktormykhailiv.kmp.health.units/Length? // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.component5|component5(){}[0]
        final fun component6(): com.viktormykhailiv.kmp.health.units/Length? // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.component6|component6(){}[0]
        final fun copy(kotlin.time/Instant = ..., kotlin/Double = ..., kotlin/Double = ..., com.viktormykhailiv.kmp.health.units/Length? = ..., com.viktormykhailiv.kmp.health.units/Length? = ..., com.viktormykhailiv.kmp.health.units/Length? = ...): com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.copy|copy(kotlin.time.Instant;kotlin.Double;kotlin.Double;com.viktormykhailiv.kmp.health.units.Length?;com.viktormykhailiv.kmp.health.units.Length?;com.viktormykhailiv.kmp.health.units.Length?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseRoute.Location.toString|toString(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.records/ExerciseSegment { // com.viktormykhailiv.kmp.health.records/ExerciseSegment|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type, kotlin/Int = ...) // com.viktormykhailiv.kmp.health.records/ExerciseSegment.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.records.ExerciseSegment.Type;kotlin.Int){}[0]

    final val endTime // com.viktormykhailiv.kmp.health.records/ExerciseSegment.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/ExerciseSegment.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val repetitions // com.viktormykhailiv.kmp.health.records/ExerciseSegment.repetitions|{}repetitions[0]
        final fun <get-repetitions>(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.repetitions.<get-repetitions>|<get-repetitions>(){}[0]
    final val segmentType // com.viktormykhailiv.kmp.health.records/ExerciseSegment.segmentType|{}segmentType[0]
        final fun <get-segmentType>(): com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type // com.viktormykhailiv.kmp.health.records/ExerciseSegment.segmentType.<get-segmentType>|<get-segmentType>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.records/ExerciseSegment.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/ExerciseSegment.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/ExerciseSegment.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/ExerciseSegment.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type // com.viktormykhailiv.kmp.health.records/ExerciseSegment.component3|component3(){}[0]
    final fun component4(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.component4|component4(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type = ..., kotlin/Int = ...): com.viktormykhailiv.kmp.health.records/ExerciseSegment // com.viktormykhailiv.kmp.health.records/ExerciseSegment.copy|copy(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.records.ExerciseSegment.Type;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.toString|toString(){}[0]

    sealed interface Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type|null[0]
        final object ArmCurl : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.ArmCurl|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.ArmCurl.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.ArmCurl.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.ArmCurl.toString|toString(){}[0]
        }

        final object BackExtension : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BackExtension|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BackExtension.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BackExtension.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BackExtension.toString|toString(){}[0]
        }

        final object BallSlam : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BallSlam|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BallSlam.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BallSlam.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BallSlam.toString|toString(){}[0]
        }

        final object BarbellShoulderPress : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BarbellShoulderPress|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BarbellShoulderPress.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BarbellShoulderPress.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BarbellShoulderPress.toString|toString(){}[0]
        }

        final object BenchPress : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BenchPress|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BenchPress.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BenchPress.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BenchPress.toString|toString(){}[0]
        }

        final object BenchSitUp : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BenchSitUp|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BenchSitUp.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BenchSitUp.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BenchSitUp.toString|toString(){}[0]
        }

        final object Biking : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Biking|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Biking.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Biking.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Biking.toString|toString(){}[0]
        }

        final object BikingStationary : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BikingStationary|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BikingStationary.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BikingStationary.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.BikingStationary.toString|toString(){}[0]
        }

        final object Burpee : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Burpee|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Burpee.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Burpee.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Burpee.toString|toString(){}[0]
        }

        final object Crunch : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Crunch|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Crunch.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Crunch.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Crunch.toString|toString(){}[0]
        }

        final object Deadlift : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Deadlift|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Deadlift.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Deadlift.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Deadlift.toString|toString(){}[0]
        }

        final object DoubleArmTricepsExtension : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DoubleArmTricepsExtension|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DoubleArmTricepsExtension.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DoubleArmTricepsExtension.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DoubleArmTricepsExtension.toString|toString(){}[0]
        }

        final object DumbbellCurlLeftArm : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellCurlLeftArm|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellCurlLeftArm.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellCurlLeftArm.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellCurlLeftArm.toString|toString(){}[0]
        }

        final object DumbbellCurlRightArm : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellCurlRightArm|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellCurlRightArm.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellCurlRightArm.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellCurlRightArm.toString|toString(){}[0]
        }

        final object DumbbellFrontRaise : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellFrontRaise|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellFrontRaise.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellFrontRaise.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellFrontRaise.toString|toString(){}[0]
        }

        final object DumbbellLateralRaise : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellLateralRaise|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellLateralRaise.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellLateralRaise.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellLateralRaise.toString|toString(){}[0]
        }

        final object DumbbellRow : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellRow|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellRow.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellRow.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellRow.toString|toString(){}[0]
        }

        final object DumbbellTricepsExtensionLeftArm : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellTricepsExtensionLeftArm|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellTricepsExtensionLeftArm.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellTricepsExtensionLeftArm.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellTricepsExtensionLeftArm.toString|toString(){}[0]
        }

        final object DumbbellTricepsExtensionRightArm : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellTricepsExtensionRightArm|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellTricepsExtensionRightArm.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellTricepsExtensionRightArm.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellTricepsExtensionRightArm.toString|toString(){}[0]
        }

        final object DumbbellTricepsExtensionTwoArm : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellTricepsExtensionTwoArm|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellTricepsExtensionTwoArm.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellTricepsExtensionTwoArm.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.DumbbellTricepsExtensionTwoArm.toString|toString(){}[0]
        }

        final object Elliptical : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Elliptical|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Elliptical.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Elliptical.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Elliptical.toString|toString(){}[0]
        }

        final object ForwardTwist : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.ForwardTwist|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.ForwardTwist.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.ForwardTwist.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.ForwardTwist.toString|toString(){}[0]
        }

        final object FrontRaise : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.FrontRaise|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.FrontRaise.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.FrontRaise.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.FrontRaise.toString|toString(){}[0]
        }

        final object HighIntensityIntervalTraining : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.HighIntensityIntervalTraining|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.HighIntensityIntervalTraining.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.HighIntensityIntervalTraining.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.HighIntensityIntervalTraining.toString|toString(){}[0]
        }

        final object HipThrust : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.HipThrust|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.HipThrust.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.HipThrust.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.HipThrust.toString|toString(){}[0]
        }

        final object HulaHoop : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.HulaHoop|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.HulaHoop.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.HulaHoop.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.HulaHoop.toString|toString(){}[0]
        }

        final object JumpRope : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.JumpRope|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.JumpRope.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.JumpRope.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.JumpRope.toString|toString(){}[0]
        }

        final object JumpingJack : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.JumpingJack|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.JumpingJack.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.JumpingJack.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.JumpingJack.toString|toString(){}[0]
        }

        final object KettlebellSwing : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.KettlebellSwing|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.KettlebellSwing.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.KettlebellSwing.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.KettlebellSwing.toString|toString(){}[0]
        }

        final object LatPullDown : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LatPullDown|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LatPullDown.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LatPullDown.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LatPullDown.toString|toString(){}[0]
        }

        final object LateralRaise : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LateralRaise|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LateralRaise.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LateralRaise.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LateralRaise.toString|toString(){}[0]
        }

        final object LegCurl : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegCurl|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegCurl.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegCurl.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegCurl.toString|toString(){}[0]
        }

        final object LegExtension : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegExtension|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegExtension.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegExtension.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegExtension.toString|toString(){}[0]
        }

        final object LegPress : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegPress|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegPress.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegPress.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegPress.toString|toString(){}[0]
        }

        final object LegRaise : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegRaise|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegRaise.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegRaise.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.LegRaise.toString|toString(){}[0]
        }

        final object Lunge : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Lunge|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Lunge.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Lunge.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Lunge.toString|toString(){}[0]
        }

        final object MountainClimber : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.MountainClimber|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.MountainClimber.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.MountainClimber.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.MountainClimber.toString|toString(){}[0]
        }

        final object OtherWorkout : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.OtherWorkout|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.OtherWorkout.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.OtherWorkout.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.OtherWorkout.toString|toString(){}[0]
        }

        final object Pause : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Pause|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Pause.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Pause.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Pause.toString|toString(){}[0]
        }

        final object Pilates : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Pilates|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Pilates.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Pilates.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Pilates.toString|toString(){}[0]
        }

        final object Plank : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Plank|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Plank.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Plank.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Plank.toString|toString(){}[0]
        }

        final object PullUp : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.PullUp|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.PullUp.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.PullUp.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.PullUp.toString|toString(){}[0]
        }

        final object Punch : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Punch|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Punch.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Punch.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Punch.toString|toString(){}[0]
        }

        final object Rest : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Rest|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Rest.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Rest.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Rest.toString|toString(){}[0]
        }

        final object RowingMachine : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.RowingMachine|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.RowingMachine.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.RowingMachine.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.RowingMachine.toString|toString(){}[0]
        }

        final object Running : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Running|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Running.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Running.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Running.toString|toString(){}[0]
        }

        final object RunningTreadmill : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.RunningTreadmill|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.RunningTreadmill.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.RunningTreadmill.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.RunningTreadmill.toString|toString(){}[0]
        }

        final object ShoulderPress : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.ShoulderPress|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.ShoulderPress.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.ShoulderPress.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.ShoulderPress.toString|toString(){}[0]
        }

        final object SingleArmTricepsExtension : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SingleArmTricepsExtension|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SingleArmTricepsExtension.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SingleArmTricepsExtension.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SingleArmTricepsExtension.toString|toString(){}[0]
        }

        final object SitUp : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SitUp|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SitUp.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SitUp.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SitUp.toString|toString(){}[0]
        }

        final object Squat : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Squat|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Squat.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Squat.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Squat.toString|toString(){}[0]
        }

        final object StairClimbing : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.StairClimbing|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.StairClimbing.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.StairClimbing.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.StairClimbing.toString|toString(){}[0]
        }

        final object StairClimbingMachine : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.StairClimbingMachine|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.StairClimbingMachine.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.StairClimbingMachine.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.StairClimbingMachine.toString|toString(){}[0]
        }

        final object Stretching : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Stretching|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Stretching.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Stretching.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Stretching.toString|toString(){}[0]
        }

        final object SwimmingBackstroke : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingBackstroke|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingBackstroke.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingBackstroke.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingBackstroke.toString|toString(){}[0]
        }

        final object SwimmingBreaststroke : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingBreaststroke|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingBreaststroke.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingBreaststroke.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingBreaststroke.toString|toString(){}[0]
        }

        final object SwimmingButterfly : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingButterfly|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingButterfly.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingButterfly.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingButterfly.toString|toString(){}[0]
        }

        final object SwimmingFreestyle : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingFreestyle|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingFreestyle.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingFreestyle.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingFreestyle.toString|toString(){}[0]
        }

        final object SwimmingMixed : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingMixed|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingMixed.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingMixed.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingMixed.toString|toString(){}[0]
        }

        final object SwimmingOpenWater : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingOpenWater|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingOpenWater.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingOpenWater.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingOpenWater.toString|toString(){}[0]
        }

        final object SwimmingOther : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingOther|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingOther.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingOther.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingOther.toString|toString(){}[0]
        }

        final object SwimmingPool : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingPool|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingPool.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingPool.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.SwimmingPool.toString|toString(){}[0]
        }

        final object Unknown : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Unknown|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Unknown.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Unknown.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Unknown.toString|toString(){}[0]
        }

        final object UpperTwist : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.UpperTwist|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.UpperTwist.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.UpperTwist.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.UpperTwist.toString|toString(){}[0]
        }

        final object Walking : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Walking|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Walking.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Walking.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Walking.toString|toString(){}[0]
        }

        final object Weightlifting : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Weightlifting|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Weightlifting.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Weightlifting.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Weightlifting.toString|toString(){}[0]
        }

        final object Wheelchair : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Wheelchair|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Wheelchair.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Wheelchair.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Wheelchair.toString|toString(){}[0]
        }

        final object Yoga : com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type { // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Yoga|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Yoga.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Yoga.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSegment.Type.Yoga.toString|toString(){}[0]
        }
    }
}

final class com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord : com.viktormykhailiv.kmp.health/IntervalRecord { // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health.records/ExerciseType, kotlin/String? = ..., kotlin/String? = ..., kotlin.collections/List<com.viktormykhailiv.kmp.health.records/ExerciseSegment> = ..., kotlin.collections/List<com.viktormykhailiv.kmp.health.records/ExerciseLap> = ..., com.viktormykhailiv.kmp.health.records/ExerciseRoute?, kotlin/String? = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.records.ExerciseType;kotlin.String?;kotlin.String?;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.ExerciseSegment>;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.ExerciseLap>;com.viktormykhailiv.kmp.health.records.ExerciseRoute?;kotlin.String?;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val exerciseRoute // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.exerciseRoute|{}exerciseRoute[0]
        final fun <get-exerciseRoute>(): com.viktormykhailiv.kmp.health.records/ExerciseRoute? // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.exerciseRoute.<get-exerciseRoute>|<get-exerciseRoute>(){}[0]
    final val exerciseType // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.exerciseType|{}exerciseType[0]
        final fun <get-exerciseType>(): com.viktormykhailiv.kmp.health.records/ExerciseType // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.exerciseType.<get-exerciseType>|<get-exerciseType>(){}[0]
    final val laps // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.laps|{}laps[0]
        final fun <get-laps>(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/ExerciseLap> // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.laps.<get-laps>|<get-laps>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val notes // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.notes|{}notes[0]
        final fun <get-notes>(): kotlin/String? // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.notes.<get-notes>|<get-notes>(){}[0]
    final val plannedExerciseSessionId // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.plannedExerciseSessionId|{}plannedExerciseSessionId[0]
        final fun <get-plannedExerciseSessionId>(): kotlin/String? // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.plannedExerciseSessionId.<get-plannedExerciseSessionId>|<get-plannedExerciseSessionId>(){}[0]
    final val segments // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.segments|{}segments[0]
        final fun <get-segments>(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/ExerciseSegment> // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.segments.<get-segments>|<get-segments>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.startTime.<get-startTime>|<get-startTime>(){}[0]
    final val title // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.title|{}title[0]
        final fun <get-title>(): kotlin/String? // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.title.<get-title>|<get-title>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.component1|component1(){}[0]
    final fun component10(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.component10|component10(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.records/ExerciseType // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.component3|component3(){}[0]
    final fun component4(): kotlin/String? // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.component4|component4(){}[0]
    final fun component5(): kotlin/String? // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.component5|component5(){}[0]
    final fun component6(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/ExerciseSegment> // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.component6|component6(){}[0]
    final fun component7(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/ExerciseLap> // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.component7|component7(){}[0]
    final fun component8(): com.viktormykhailiv.kmp.health.records/ExerciseRoute? // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.component8|component8(){}[0]
    final fun component9(): kotlin/String? // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.component9|component9(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.records/ExerciseType = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin.collections/List<com.viktormykhailiv.kmp.health.records/ExerciseSegment> = ..., kotlin.collections/List<com.viktormykhailiv.kmp.health.records/ExerciseLap> = ..., com.viktormykhailiv.kmp.health.records/ExerciseRoute? = ..., kotlin/String? = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.records.ExerciseType;kotlin.String?;kotlin.String?;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.ExerciseSegment>;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.ExerciseLap>;com.viktormykhailiv.kmp.health.records.ExerciseRoute?;kotlin.String?;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.records/HeartRateRecord : com.viktormykhailiv.kmp.health/SeriesRecord<com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample> { // com.viktormykhailiv.kmp.health.records/HeartRateRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample>, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/HeartRateRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.HeartRateRecord.Sample>;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/HeartRateRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/HeartRateRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.records/HeartRateRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/HeartRateRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/HeartRateRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/HeartRateRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val samples // com.viktormykhailiv.kmp.health.records/HeartRateRecord.samples|{}samples[0]
        final fun <get-samples>(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample> // com.viktormykhailiv.kmp.health.records/HeartRateRecord.samples.<get-samples>|<get-samples>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.records/HeartRateRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/HeartRateRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/HeartRateRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/HeartRateRecord.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample> // com.viktormykhailiv.kmp.health.records/HeartRateRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/HeartRateRecord.component4|component4(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample> = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/HeartRateRecord // com.viktormykhailiv.kmp.health.records/HeartRateRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.HeartRateRecord.Sample>;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/HeartRateRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/HeartRateRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/HeartRateRecord.toString|toString(){}[0]

    final class Sample { // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample|null[0]
        constructor <init>(kotlin.time/Instant, kotlin/Int) // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.<init>|<init>(kotlin.time.Instant;kotlin.Int){}[0]

        final val beatsPerMinute // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.beatsPerMinute|{}beatsPerMinute[0]
            final fun <get-beatsPerMinute>(): kotlin/Int // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.beatsPerMinute.<get-beatsPerMinute>|<get-beatsPerMinute>(){}[0]
        final val time // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.time|{}time[0]
            final fun <get-time>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.time.<get-time>|<get-time>(){}[0]

        final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.component1|component1(){}[0]
        final fun component2(): kotlin/Int // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.component2|component2(){}[0]
        final fun copy(kotlin.time/Instant = ..., kotlin/Int = ...): com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.copy|copy(kotlin.time.Instant;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.toString|toString(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.records/HeightRecord : com.viktormykhailiv.kmp.health/InstantaneousRecord { // com.viktormykhailiv.kmp.health.records/HeightRecord|null[0]
    constructor <init>(kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/Length, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/HeightRecord.<init>|<init>(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Length;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/HeightRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/HeightRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val height // com.viktormykhailiv.kmp.health.records/HeightRecord.height|{}height[0]
        final fun <get-height>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.records/HeightRecord.height.<get-height>|<get-height>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/HeightRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/HeightRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val time // com.viktormykhailiv.kmp.health.records/HeightRecord.time|{}time[0]
        final fun <get-time>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/HeightRecord.time.<get-time>|<get-time>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/HeightRecord.component1|component1(){}[0]
    final fun component2(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.records/HeightRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/HeightRecord.component3|component3(){}[0]
    final fun copy(kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/Length = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/HeightRecord // com.viktormykhailiv.kmp.health.records/HeightRecord.copy|copy(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Length;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/HeightRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/HeightRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/HeightRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord : com.viktormykhailiv.kmp.health/InstantaneousRecord { // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord|null[0]
    constructor <init>(kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/Mass, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.<init>|<init>(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val mass // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.mass|{}mass[0]
        final fun <get-mass>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.mass.<get-mass>|<get-mass>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val time // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.time|{}time[0]
        final fun <get-time>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.time.<get-time>|<get-time>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.component1|component1(){}[0]
    final fun component2(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.component3|component3(){}[0]
    final fun copy(kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/Mass = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.copy|copy(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.records/PowerRecord : com.viktormykhailiv.kmp.health/SeriesRecord<com.viktormykhailiv.kmp.health.records/PowerRecord.Sample> { // com.viktormykhailiv.kmp.health.records/PowerRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, kotlin.collections/List<com.viktormykhailiv.kmp.health.records/PowerRecord.Sample>, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/PowerRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.PowerRecord.Sample>;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/PowerRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/PowerRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.records/PowerRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/PowerRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/PowerRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/PowerRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val samples // com.viktormykhailiv.kmp.health.records/PowerRecord.samples|{}samples[0]
        final fun <get-samples>(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/PowerRecord.Sample> // com.viktormykhailiv.kmp.health.records/PowerRecord.samples.<get-samples>|<get-samples>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.records/PowerRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/PowerRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/PowerRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/PowerRecord.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/PowerRecord.Sample> // com.viktormykhailiv.kmp.health.records/PowerRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/PowerRecord.component4|component4(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., kotlin.collections/List<com.viktormykhailiv.kmp.health.records/PowerRecord.Sample> = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/PowerRecord // com.viktormykhailiv.kmp.health.records/PowerRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.PowerRecord.Sample>;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/PowerRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/PowerRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/PowerRecord.toString|toString(){}[0]

    final class Sample { // com.viktormykhailiv.kmp.health.records/PowerRecord.Sample|null[0]
        constructor <init>(kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/Power) // com.viktormykhailiv.kmp.health.records/PowerRecord.Sample.<init>|<init>(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Power){}[0]

        final val power // com.viktormykhailiv.kmp.health.records/PowerRecord.Sample.power|{}power[0]
            final fun <get-power>(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.records/PowerRecord.Sample.power.<get-power>|<get-power>(){}[0]
        final val time // com.viktormykhailiv.kmp.health.records/PowerRecord.Sample.time|{}time[0]
            final fun <get-time>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/PowerRecord.Sample.time.<get-time>|<get-time>(){}[0]

        final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/PowerRecord.Sample.component1|component1(){}[0]
        final fun component2(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.records/PowerRecord.Sample.component2|component2(){}[0]
        final fun copy(kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/Power = ...): com.viktormykhailiv.kmp.health.records/PowerRecord.Sample // com.viktormykhailiv.kmp.health.records/PowerRecord.Sample.copy|copy(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Power){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/PowerRecord.Sample.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/PowerRecord.Sample.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/PowerRecord.Sample.toString|toString(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.records/SleepSessionRecord : com.viktormykhailiv.kmp.health/IntervalRecord { // com.viktormykhailiv.kmp.health.records/SleepSessionRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage>, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.SleepSessionRecord.Stage>;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val stages // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.stages|{}stages[0]
        final fun <get-stages>(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage> // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.stages.<get-stages>|<get-stages>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage> // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.component4|component4(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage> = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/SleepSessionRecord // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.SleepSessionRecord.Stage>;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.toString|toString(){}[0]

    final class Stage { // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage|null[0]
        constructor <init>(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health.records/SleepStageType) // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.records.SleepStageType){}[0]

        final val endTime // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.endTime|{}endTime[0]
            final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.endTime.<get-endTime>|<get-endTime>(){}[0]
        final val startTime // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.startTime|{}startTime[0]
            final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.startTime.<get-startTime>|<get-startTime>(){}[0]
        final val type // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.type|{}type[0]
            final fun <get-type>(): com.viktormykhailiv.kmp.health.records/SleepStageType // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.type.<get-type>|<get-type>(){}[0]

        final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.component1|component1(){}[0]
        final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.component2|component2(){}[0]
        final fun component3(): com.viktormykhailiv.kmp.health.records/SleepStageType // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.component3|component3(){}[0]
        final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.records/SleepStageType = ...): com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.copy|copy(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.records.SleepStageType){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.toString|toString(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.records/StepsRecord : com.viktormykhailiv.kmp.health/IntervalRecord { // com.viktormykhailiv.kmp.health.records/StepsRecord|null[0]
    constructor <init>(kotlin.time/Instant, kotlin.time/Instant, kotlin/Int, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/StepsRecord.<init>|<init>(kotlin.time.Instant;kotlin.time.Instant;kotlin.Int;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val count // com.viktormykhailiv.kmp.health.records/StepsRecord.count|{}count[0]
        final fun <get-count>(): kotlin/Int // com.viktormykhailiv.kmp.health.records/StepsRecord.count.<get-count>|<get-count>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.records/StepsRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/StepsRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.records/StepsRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/StepsRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/StepsRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/StepsRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.records/StepsRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/StepsRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/StepsRecord.component1|component1(){}[0]
    final fun component2(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/StepsRecord.component2|component2(){}[0]
    final fun component3(): kotlin/Int // com.viktormykhailiv.kmp.health.records/StepsRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/StepsRecord.component4|component4(){}[0]
    final fun copy(kotlin.time/Instant = ..., kotlin.time/Instant = ..., kotlin/Int = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/StepsRecord // com.viktormykhailiv.kmp.health.records/StepsRecord.copy|copy(kotlin.time.Instant;kotlin.time.Instant;kotlin.Int;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/StepsRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/StepsRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/StepsRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.records/WeightRecord : com.viktormykhailiv.kmp.health/InstantaneousRecord { // com.viktormykhailiv.kmp.health.records/WeightRecord|null[0]
    constructor <init>(kotlin.time/Instant, com.viktormykhailiv.kmp.health.units/Mass, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/WeightRecord.<init>|<init>(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/WeightRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/WeightRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/WeightRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/WeightRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val time // com.viktormykhailiv.kmp.health.records/WeightRecord.time|{}time[0]
        final fun <get-time>(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/WeightRecord.time.<get-time>|<get-time>(){}[0]
    final val weight // com.viktormykhailiv.kmp.health.records/WeightRecord.weight|{}weight[0]
        final fun <get-weight>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.records/WeightRecord.weight.<get-weight>|<get-weight>(){}[0]

    final fun component1(): kotlin.time/Instant // com.viktormykhailiv.kmp.health.records/WeightRecord.component1|component1(){}[0]
    final fun component2(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.records/WeightRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/WeightRecord.component3|component3(){}[0]
    final fun copy(kotlin.time/Instant = ..., com.viktormykhailiv.kmp.health.units/Mass = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/WeightRecord // com.viktormykhailiv.kmp.health.records/WeightRecord.copy|copy(kotlin.time.Instant;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/WeightRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/WeightRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/WeightRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.region/RegionalPreferences { // com.viktormykhailiv.kmp.health.region/RegionalPreferences|null[0]
    constructor <init>(com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference) // com.viktormykhailiv.kmp.health.region/RegionalPreferences.<init>|<init>(com.viktormykhailiv.kmp.health.region.TemperatureRegionalPreference){}[0]

    final val temperature // com.viktormykhailiv.kmp.health.region/RegionalPreferences.temperature|{}temperature[0]
        final fun <get-temperature>(): com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference // com.viktormykhailiv.kmp.health.region/RegionalPreferences.temperature.<get-temperature>|<get-temperature>(){}[0]

    final fun component1(): com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference // com.viktormykhailiv.kmp.health.region/RegionalPreferences.component1|component1(){}[0]
    final fun copy(com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference = ...): com.viktormykhailiv.kmp.health.region/RegionalPreferences // com.viktormykhailiv.kmp.health.region/RegionalPreferences.copy|copy(com.viktormykhailiv.kmp.health.region.TemperatureRegionalPreference){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.region/RegionalPreferences.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.region/RegionalPreferences.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.region/RegionalPreferences.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.units/BloodGlucose : kotlin/Comparable<com.viktormykhailiv.kmp.health.units/BloodGlucose> { // com.viktormykhailiv.kmp.health.units/BloodGlucose|null[0]
    final val inMilligramsPerDeciliter // com.viktormykhailiv.kmp.health.units/BloodGlucose.inMilligramsPerDeciliter|{}inMilligramsPerDeciliter[0]
        final fun <get-inMilligramsPerDeciliter>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/BloodGlucose.inMilligramsPerDeciliter.<get-inMilligramsPerDeciliter>|<get-inMilligramsPerDeciliter>(){}[0]
    final val inMillimolesPerLiter // com.viktormykhailiv.kmp.health.units/BloodGlucose.inMillimolesPerLiter|{}inMillimolesPerLiter[0]
        final fun <get-inMillimolesPerLiter>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/BloodGlucose.inMillimolesPerLiter.<get-inMillimolesPerLiter>|<get-inMillimolesPerLiter>(){}[0]

    final fun compareTo(com.viktormykhailiv.kmp.health.units/BloodGlucose): kotlin/Int // com.viktormykhailiv.kmp.health.units/BloodGlucose.compareTo|compareTo(com.viktormykhailiv.kmp.health.units.BloodGlucose){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.units/BloodGlucose.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.units/BloodGlucose.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.units/BloodGlucose.toString|toString(){}[0]

    final object Companion { // com.viktormykhailiv.kmp.health.units/BloodGlucose.Companion|null[0]
        final fun milligramsPerDeciliter(kotlin/Double): com.viktormykhailiv.kmp.health.units/BloodGlucose // com.viktormykhailiv.kmp.health.units/BloodGlucose.Companion.milligramsPerDeciliter|milligramsPerDeciliter(kotlin.Double){}[0]
        final fun millimolesPerLiter(kotlin/Double): com.viktormykhailiv.kmp.health.units/BloodGlucose // com.viktormykhailiv.kmp.health.units/BloodGlucose.Companion.millimolesPerLiter|millimolesPerLiter(kotlin.Double){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.units/Length : kotlin/Comparable<com.viktormykhailiv.kmp.health.units/Length> { // com.viktormykhailiv.kmp.health.units/Length|null[0]
    final val inFeet // com.viktormykhailiv.kmp.health.units/Length.inFeet|{}inFeet[0]
        final fun <get-inFeet>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Length.inFeet.<get-inFeet>|<get-inFeet>(){}[0]
    final val inInches // com.viktormykhailiv.kmp.health.units/Length.inInches|{}inInches[0]
        final fun <get-inInches>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Length.inInches.<get-inInches>|<get-inInches>(){}[0]
    final val inKilometers // com.viktormykhailiv.kmp.health.units/Length.inKilometers|{}inKilometers[0]
        final fun <get-inKilometers>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Length.inKilometers.<get-inKilometers>|<get-inKilometers>(){}[0]
    final val inMeters // com.viktormykhailiv.kmp.health.units/Length.inMeters|{}inMeters[0]
        final fun <get-inMeters>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Length.inMeters.<get-inMeters>|<get-inMeters>(){}[0]
    final val inMiles // com.viktormykhailiv.kmp.health.units/Length.inMiles|{}inMiles[0]
        final fun <get-inMiles>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Length.inMiles.<get-inMiles>|<get-inMiles>(){}[0]

    final fun compareTo(com.viktormykhailiv.kmp.health.units/Length): kotlin/Int // com.viktormykhailiv.kmp.health.units/Length.compareTo|compareTo(com.viktormykhailiv.kmp.health.units.Length){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.units/Length.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.units/Length.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.units/Length.toString|toString(){}[0]

    final object Companion { // com.viktormykhailiv.kmp.health.units/Length.Companion|null[0]
        final fun feet(kotlin/Double): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/Length.Companion.feet|feet(kotlin.Double){}[0]
        final fun inches(kotlin/Double): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/Length.Companion.inches|inches(kotlin.Double){}[0]
        final fun kilometers(kotlin/Double): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/Length.Companion.kilometers|kilometers(kotlin.Double){}[0]
        final fun meters(kotlin/Double): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/Length.Companion.meters|meters(kotlin.Double){}[0]
        final fun miles(kotlin/Double): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/Length.Companion.miles|miles(kotlin.Double){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.units/Mass : kotlin/Comparable<com.viktormykhailiv.kmp.health.units/Mass> { // com.viktormykhailiv.kmp.health.units/Mass|null[0]
    final val inGrams // com.viktormykhailiv.kmp.health.units/Mass.inGrams|{}inGrams[0]
        final fun <get-inGrams>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inGrams.<get-inGrams>|<get-inGrams>(){}[0]
    final val inKilograms // com.viktormykhailiv.kmp.health.units/Mass.inKilograms|{}inKilograms[0]
        final fun <get-inKilograms>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inKilograms.<get-inKilograms>|<get-inKilograms>(){}[0]
    final val inMicrograms // com.viktormykhailiv.kmp.health.units/Mass.inMicrograms|{}inMicrograms[0]
        final fun <get-inMicrograms>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inMicrograms.<get-inMicrograms>|<get-inMicrograms>(){}[0]
    final val inMilligrams // com.viktormykhailiv.kmp.health.units/Mass.inMilligrams|{}inMilligrams[0]
        final fun <get-inMilligrams>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inMilligrams.<get-inMilligrams>|<get-inMilligrams>(){}[0]
    final val inOunces // com.viktormykhailiv.kmp.health.units/Mass.inOunces|{}inOunces[0]
        final fun <get-inOunces>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inOunces.<get-inOunces>|<get-inOunces>(){}[0]
    final val inPounds // com.viktormykhailiv.kmp.health.units/Mass.inPounds|{}inPounds[0]
        final fun <get-inPounds>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inPounds.<get-inPounds>|<get-inPounds>(){}[0]

    final fun compareTo(com.viktormykhailiv.kmp.health.units/Mass): kotlin/Int // com.viktormykhailiv.kmp.health.units/Mass.compareTo|compareTo(com.viktormykhailiv.kmp.health.units.Mass){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.units/Mass.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.units/Mass.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.units/Mass.toString|toString(){}[0]

    final object Companion { // com.viktormykhailiv.kmp.health.units/Mass.Companion|null[0]
        final fun grams(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.grams|grams(kotlin.Double){}[0]
        final fun kilograms(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.kilograms|kilograms(kotlin.Double){}[0]
        final fun micrograms(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.micrograms|micrograms(kotlin.Double){}[0]
        final fun milligrams(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.milligrams|milligrams(kotlin.Double){}[0]
        final fun ounces(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.ounces|ounces(kotlin.Double){}[0]
        final fun pounds(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.pounds|pounds(kotlin.Double){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.units/Percentage : kotlin/Comparable<com.viktormykhailiv.kmp.health.units/Percentage> { // com.viktormykhailiv.kmp.health.units/Percentage|null[0]
    constructor <init>(kotlin/Double) // com.viktormykhailiv.kmp.health.units/Percentage.<init>|<init>(kotlin.Double){}[0]

    final val value // com.viktormykhailiv.kmp.health.units/Percentage.value|{}value[0]
        final fun <get-value>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Percentage.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(com.viktormykhailiv.kmp.health.units/Percentage): kotlin/Int // com.viktormykhailiv.kmp.health.units/Percentage.compareTo|compareTo(com.viktormykhailiv.kmp.health.units.Percentage){}[0]
    final fun component1(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Percentage.component1|component1(){}[0]
    final fun copy(kotlin/Double = ...): com.viktormykhailiv.kmp.health.units/Percentage // com.viktormykhailiv.kmp.health.units/Percentage.copy|copy(kotlin.Double){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.units/Percentage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.units/Percentage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.units/Percentage.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.units/Power : kotlin/Comparable<com.viktormykhailiv.kmp.health.units/Power> { // com.viktormykhailiv.kmp.health.units/Power|null[0]
    final val inKilocaloriesPerDay // com.viktormykhailiv.kmp.health.units/Power.inKilocaloriesPerDay|{}inKilocaloriesPerDay[0]
        final fun <get-inKilocaloriesPerDay>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Power.inKilocaloriesPerDay.<get-inKilocaloriesPerDay>|<get-inKilocaloriesPerDay>(){}[0]
    final val inWatts // com.viktormykhailiv.kmp.health.units/Power.inWatts|{}inWatts[0]
        final fun <get-inWatts>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Power.inWatts.<get-inWatts>|<get-inWatts>(){}[0]

    final fun compareTo(com.viktormykhailiv.kmp.health.units/Power): kotlin/Int // com.viktormykhailiv.kmp.health.units/Power.compareTo|compareTo(com.viktormykhailiv.kmp.health.units.Power){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.units/Power.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.units/Power.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.units/Power.toString|toString(){}[0]

    final object Companion { // com.viktormykhailiv.kmp.health.units/Power.Companion|null[0]
        final fun kilocaloriesPerDay(kotlin/Double): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.units/Power.Companion.kilocaloriesPerDay|kilocaloriesPerDay(kotlin.Double){}[0]
        final fun watts(kotlin/Double): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.units/Power.Companion.watts|watts(kotlin.Double){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.units/Pressure : kotlin/Comparable<com.viktormykhailiv.kmp.health.units/Pressure> { // com.viktormykhailiv.kmp.health.units/Pressure|null[0]
    final val inMillimetersOfMercury // com.viktormykhailiv.kmp.health.units/Pressure.inMillimetersOfMercury|{}inMillimetersOfMercury[0]
        final fun <get-inMillimetersOfMercury>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Pressure.inMillimetersOfMercury.<get-inMillimetersOfMercury>|<get-inMillimetersOfMercury>(){}[0]

    final fun compareTo(com.viktormykhailiv.kmp.health.units/Pressure): kotlin/Int // com.viktormykhailiv.kmp.health.units/Pressure.compareTo|compareTo(com.viktormykhailiv.kmp.health.units.Pressure){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.units/Pressure.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.units/Pressure.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.units/Pressure.toString|toString(){}[0]

    final object Companion { // com.viktormykhailiv.kmp.health.units/Pressure.Companion|null[0]
        final fun millimetersOfMercury(kotlin/Double): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.units/Pressure.Companion.millimetersOfMercury|millimetersOfMercury(kotlin.Double){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.units/Temperature : kotlin/Comparable<com.viktormykhailiv.kmp.health.units/Temperature> { // com.viktormykhailiv.kmp.health.units/Temperature|null[0]
    final val inCelsius // com.viktormykhailiv.kmp.health.units/Temperature.inCelsius|{}inCelsius[0]
        final fun <get-inCelsius>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Temperature.inCelsius.<get-inCelsius>|<get-inCelsius>(){}[0]
    final val inFahrenheit // com.viktormykhailiv.kmp.health.units/Temperature.inFahrenheit|{}inFahrenheit[0]
        final fun <get-inFahrenheit>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Temperature.inFahrenheit.<get-inFahrenheit>|<get-inFahrenheit>(){}[0]

    final fun compareTo(com.viktormykhailiv.kmp.health.units/Temperature): kotlin/Int // com.viktormykhailiv.kmp.health.units/Temperature.compareTo|compareTo(com.viktormykhailiv.kmp.health.units.Temperature){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.units/Temperature.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.units/Temperature.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.units/Temperature.toString|toString(){}[0]

    final object Companion { // com.viktormykhailiv.kmp.health.units/Temperature.Companion|null[0]
        final fun celsius(kotlin/Double): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.units/Temperature.Companion.celsius|celsius(kotlin.Double){}[0]
        final fun fahrenheit(kotlin/Double): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.units/Temperature.Companion.fahrenheit|fahrenheit(kotlin.Double){}[0]
    }
}

final class com.viktormykhailiv.kmp.health/HealthManagerFactory { // com.viktormykhailiv.kmp.health/HealthManagerFactory|null[0]
    constructor <init>() // com.viktormykhailiv.kmp.health/HealthManagerFactory.<init>|<init>(){}[0]

    final fun createManager(): com.viktormykhailiv.kmp.health/HealthManager // com.viktormykhailiv.kmp.health/HealthManagerFactory.createManager|createManager(){}[0]
}

final class com.viktormykhailiv.kmp.health/SwiftHealthManager { // com.viktormykhailiv.kmp.health/SwiftHealthManager|null[0]
    constructor <init>(com.viktormykhailiv.kmp.health/HealthManager) // com.viktormykhailiv.kmp.health/SwiftHealthManager.<init>|<init>(com.viktormykhailiv.kmp.health.HealthManager){}[0]

    final fun isAvailable(): kotlin/Boolean // com.viktormykhailiv.kmp.health/SwiftHealthManager.isAvailable|isAvailable(){}[0]
    final suspend fun aggregate(platform.Foundation/NSDate, platform.Foundation/NSDate, com.viktormykhailiv.kmp.health/HealthDataType): com.viktormykhailiv.kmp.health/HealthAggregatedRecord // com.viktormykhailiv.kmp.health/SwiftHealthManager.aggregate|aggregate(platform.Foundation.NSDate;platform.Foundation.NSDate;com.viktormykhailiv.kmp.health.HealthDataType){}[0]
    final suspend fun getRegionalPreferences(): com.viktormykhailiv.kmp.health.region/RegionalPreferences // com.viktormykhailiv.kmp.health/SwiftHealthManager.getRegionalPreferences|getRegionalPreferences(){}[0]
    final suspend fun isAuthorized(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>, kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>): kotlin/Boolean // com.viktormykhailiv.kmp.health/SwiftHealthManager.isAuthorized|isAuthorized(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>;kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>){}[0]
    final suspend fun isRevokeAuthorizationSupported(): kotlin/Boolean // com.viktormykhailiv.kmp.health/SwiftHealthManager.isRevokeAuthorizationSupported|isRevokeAuthorizationSupported(){}[0]
    final suspend fun readData(platform.Foundation/NSDate, platform.Foundation/NSDate, com.viktormykhailiv.kmp.health/HealthDataType): kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthRecord> // com.viktormykhailiv.kmp.health/SwiftHealthManager.readData|readData(platform.Foundation.NSDate;platform.Foundation.NSDate;com.viktormykhailiv.kmp.health.HealthDataType){}[0]
    final suspend fun requestAuthorization(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>, kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>): kotlin/Boolean // com.viktormykhailiv.kmp.health/SwiftHealthManager.requestAuthorization|requestAuthorization(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>;kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>){}[0]
    final suspend fun revokeAuthorization() // com.viktormykhailiv.kmp.health/SwiftHealthManager.revokeAuthorization|revokeAuthorization(){}[0]
    final suspend fun writeData(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthRecord>) // com.viktormykhailiv.kmp.health/SwiftHealthManager.writeData|writeData(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthRecord>){}[0]
}

final val com.viktormykhailiv.kmp.health.units/celsius // com.viktormykhailiv.kmp.health.units/celsius|@kotlin.Double{}celsius[0]
    final fun (kotlin/Double).<get-celsius>(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.units/celsius.<get-celsius>|<get-celsius>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/celsius // com.viktormykhailiv.kmp.health.units/celsius|@kotlin.Float{}celsius[0]
    final fun (kotlin/Float).<get-celsius>(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.units/celsius.<get-celsius>|<get-celsius>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/celsius // com.viktormykhailiv.kmp.health.units/celsius|@kotlin.Int{}celsius[0]
    final fun (kotlin/Int).<get-celsius>(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.units/celsius.<get-celsius>|<get-celsius>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/celsius // com.viktormykhailiv.kmp.health.units/celsius|@kotlin.Long{}celsius[0]
    final fun (kotlin/Long).<get-celsius>(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.units/celsius.<get-celsius>|<get-celsius>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/fahrenheit // com.viktormykhailiv.kmp.health.units/fahrenheit|@kotlin.Double{}fahrenheit[0]
    final fun (kotlin/Double).<get-fahrenheit>(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.units/fahrenheit.<get-fahrenheit>|<get-fahrenheit>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/fahrenheit // com.viktormykhailiv.kmp.health.units/fahrenheit|@kotlin.Float{}fahrenheit[0]
    final fun (kotlin/Float).<get-fahrenheit>(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.units/fahrenheit.<get-fahrenheit>|<get-fahrenheit>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/fahrenheit // com.viktormykhailiv.kmp.health.units/fahrenheit|@kotlin.Int{}fahrenheit[0]
    final fun (kotlin/Int).<get-fahrenheit>(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.units/fahrenheit.<get-fahrenheit>|<get-fahrenheit>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/fahrenheit // com.viktormykhailiv.kmp.health.units/fahrenheit|@kotlin.Long{}fahrenheit[0]
    final fun (kotlin/Long).<get-fahrenheit>(): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.units/fahrenheit.<get-fahrenheit>|<get-fahrenheit>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/feet // com.viktormykhailiv.kmp.health.units/feet|@kotlin.Double{}feet[0]
    final fun (kotlin/Double).<get-feet>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/feet.<get-feet>|<get-feet>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/feet // com.viktormykhailiv.kmp.health.units/feet|@kotlin.Float{}feet[0]
    final fun (kotlin/Float).<get-feet>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/feet.<get-feet>|<get-feet>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/feet // com.viktormykhailiv.kmp.health.units/feet|@kotlin.Int{}feet[0]
    final fun (kotlin/Int).<get-feet>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/feet.<get-feet>|<get-feet>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/feet // com.viktormykhailiv.kmp.health.units/feet|@kotlin.Long{}feet[0]
    final fun (kotlin/Long).<get-feet>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/feet.<get-feet>|<get-feet>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/grams // com.viktormykhailiv.kmp.health.units/grams|@kotlin.Double{}grams[0]
    final fun (kotlin/Double).<get-grams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/grams.<get-grams>|<get-grams>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/grams // com.viktormykhailiv.kmp.health.units/grams|@kotlin.Float{}grams[0]
    final fun (kotlin/Float).<get-grams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/grams.<get-grams>|<get-grams>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/grams // com.viktormykhailiv.kmp.health.units/grams|@kotlin.Int{}grams[0]
    final fun (kotlin/Int).<get-grams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/grams.<get-grams>|<get-grams>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/grams // com.viktormykhailiv.kmp.health.units/grams|@kotlin.Long{}grams[0]
    final fun (kotlin/Long).<get-grams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/grams.<get-grams>|<get-grams>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/inches // com.viktormykhailiv.kmp.health.units/inches|@kotlin.Double{}inches[0]
    final fun (kotlin/Double).<get-inches>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/inches.<get-inches>|<get-inches>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/inches // com.viktormykhailiv.kmp.health.units/inches|@kotlin.Float{}inches[0]
    final fun (kotlin/Float).<get-inches>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/inches.<get-inches>|<get-inches>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/inches // com.viktormykhailiv.kmp.health.units/inches|@kotlin.Int{}inches[0]
    final fun (kotlin/Int).<get-inches>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/inches.<get-inches>|<get-inches>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/inches // com.viktormykhailiv.kmp.health.units/inches|@kotlin.Long{}inches[0]
    final fun (kotlin/Long).<get-inches>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/inches.<get-inches>|<get-inches>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilocaloriesPerDay // com.viktormykhailiv.kmp.health.units/kilocaloriesPerDay|@kotlin.Double{}kilocaloriesPerDay[0]
    final fun (kotlin/Double).<get-kilocaloriesPerDay>(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.units/kilocaloriesPerDay.<get-kilocaloriesPerDay>|<get-kilocaloriesPerDay>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilocaloriesPerDay // com.viktormykhailiv.kmp.health.units/kilocaloriesPerDay|@kotlin.Float{}kilocaloriesPerDay[0]
    final fun (kotlin/Float).<get-kilocaloriesPerDay>(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.units/kilocaloriesPerDay.<get-kilocaloriesPerDay>|<get-kilocaloriesPerDay>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilocaloriesPerDay // com.viktormykhailiv.kmp.health.units/kilocaloriesPerDay|@kotlin.Int{}kilocaloriesPerDay[0]
    final fun (kotlin/Int).<get-kilocaloriesPerDay>(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.units/kilocaloriesPerDay.<get-kilocaloriesPerDay>|<get-kilocaloriesPerDay>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilocaloriesPerDay // com.viktormykhailiv.kmp.health.units/kilocaloriesPerDay|@kotlin.Long{}kilocaloriesPerDay[0]
    final fun (kotlin/Long).<get-kilocaloriesPerDay>(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.units/kilocaloriesPerDay.<get-kilocaloriesPerDay>|<get-kilocaloriesPerDay>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilograms // com.viktormykhailiv.kmp.health.units/kilograms|@kotlin.Double{}kilograms[0]
    final fun (kotlin/Double).<get-kilograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/kilograms.<get-kilograms>|<get-kilograms>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilograms // com.viktormykhailiv.kmp.health.units/kilograms|@kotlin.Float{}kilograms[0]
    final fun (kotlin/Float).<get-kilograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/kilograms.<get-kilograms>|<get-kilograms>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilograms // com.viktormykhailiv.kmp.health.units/kilograms|@kotlin.Int{}kilograms[0]
    final fun (kotlin/Int).<get-kilograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/kilograms.<get-kilograms>|<get-kilograms>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilograms // com.viktormykhailiv.kmp.health.units/kilograms|@kotlin.Long{}kilograms[0]
    final fun (kotlin/Long).<get-kilograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/kilograms.<get-kilograms>|<get-kilograms>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilometers // com.viktormykhailiv.kmp.health.units/kilometers|@kotlin.Double{}kilometers[0]
    final fun (kotlin/Double).<get-kilometers>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/kilometers.<get-kilometers>|<get-kilometers>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilometers // com.viktormykhailiv.kmp.health.units/kilometers|@kotlin.Float{}kilometers[0]
    final fun (kotlin/Float).<get-kilometers>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/kilometers.<get-kilometers>|<get-kilometers>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilometers // com.viktormykhailiv.kmp.health.units/kilometers|@kotlin.Int{}kilometers[0]
    final fun (kotlin/Int).<get-kilometers>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/kilometers.<get-kilometers>|<get-kilometers>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilometers // com.viktormykhailiv.kmp.health.units/kilometers|@kotlin.Long{}kilometers[0]
    final fun (kotlin/Long).<get-kilometers>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/kilometers.<get-kilometers>|<get-kilometers>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/meters // com.viktormykhailiv.kmp.health.units/meters|@kotlin.Double{}meters[0]
    final fun (kotlin/Double).<get-meters>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/meters.<get-meters>|<get-meters>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/meters // com.viktormykhailiv.kmp.health.units/meters|@kotlin.Float{}meters[0]
    final fun (kotlin/Float).<get-meters>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/meters.<get-meters>|<get-meters>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/meters // com.viktormykhailiv.kmp.health.units/meters|@kotlin.Int{}meters[0]
    final fun (kotlin/Int).<get-meters>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/meters.<get-meters>|<get-meters>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/meters // com.viktormykhailiv.kmp.health.units/meters|@kotlin.Long{}meters[0]
    final fun (kotlin/Long).<get-meters>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/meters.<get-meters>|<get-meters>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/micrograms // com.viktormykhailiv.kmp.health.units/micrograms|@kotlin.Double{}micrograms[0]
    final fun (kotlin/Double).<get-micrograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/micrograms.<get-micrograms>|<get-micrograms>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/micrograms // com.viktormykhailiv.kmp.health.units/micrograms|@kotlin.Float{}micrograms[0]
    final fun (kotlin/Float).<get-micrograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/micrograms.<get-micrograms>|<get-micrograms>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/micrograms // com.viktormykhailiv.kmp.health.units/micrograms|@kotlin.Int{}micrograms[0]
    final fun (kotlin/Int).<get-micrograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/micrograms.<get-micrograms>|<get-micrograms>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/micrograms // com.viktormykhailiv.kmp.health.units/micrograms|@kotlin.Long{}micrograms[0]
    final fun (kotlin/Long).<get-micrograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/micrograms.<get-micrograms>|<get-micrograms>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/miles // com.viktormykhailiv.kmp.health.units/miles|@kotlin.Double{}miles[0]
    final fun (kotlin/Double).<get-miles>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/miles.<get-miles>|<get-miles>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/miles // com.viktormykhailiv.kmp.health.units/miles|@kotlin.Float{}miles[0]
    final fun (kotlin/Float).<get-miles>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/miles.<get-miles>|<get-miles>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/miles // com.viktormykhailiv.kmp.health.units/miles|@kotlin.Int{}miles[0]
    final fun (kotlin/Int).<get-miles>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/miles.<get-miles>|<get-miles>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/miles // com.viktormykhailiv.kmp.health.units/miles|@kotlin.Long{}miles[0]
    final fun (kotlin/Long).<get-miles>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/miles.<get-miles>|<get-miles>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/milligrams // com.viktormykhailiv.kmp.health.units/milligrams|@kotlin.Double{}milligrams[0]
    final fun (kotlin/Double).<get-milligrams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/milligrams.<get-milligrams>|<get-milligrams>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/milligrams // com.viktormykhailiv.kmp.health.units/milligrams|@kotlin.Float{}milligrams[0]
    final fun (kotlin/Float).<get-milligrams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/milligrams.<get-milligrams>|<get-milligrams>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/milligrams // com.viktormykhailiv.kmp.health.units/milligrams|@kotlin.Int{}milligrams[0]
    final fun (kotlin/Int).<get-milligrams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/milligrams.<get-milligrams>|<get-milligrams>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/milligrams // com.viktormykhailiv.kmp.health.units/milligrams|@kotlin.Long{}milligrams[0]
    final fun (kotlin/Long).<get-milligrams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/milligrams.<get-milligrams>|<get-milligrams>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/millimetersOfMercury // com.viktormykhailiv.kmp.health.units/millimetersOfMercury|@kotlin.Double{}millimetersOfMercury[0]
    final fun (kotlin/Double).<get-millimetersOfMercury>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.units/millimetersOfMercury.<get-millimetersOfMercury>|<get-millimetersOfMercury>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/millimetersOfMercury // com.viktormykhailiv.kmp.health.units/millimetersOfMercury|@kotlin.Float{}millimetersOfMercury[0]
    final fun (kotlin/Float).<get-millimetersOfMercury>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.units/millimetersOfMercury.<get-millimetersOfMercury>|<get-millimetersOfMercury>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/millimetersOfMercury // com.viktormykhailiv.kmp.health.units/millimetersOfMercury|@kotlin.Int{}millimetersOfMercury[0]
    final fun (kotlin/Int).<get-millimetersOfMercury>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.units/millimetersOfMercury.<get-millimetersOfMercury>|<get-millimetersOfMercury>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/millimetersOfMercury // com.viktormykhailiv.kmp.health.units/millimetersOfMercury|@kotlin.Long{}millimetersOfMercury[0]
    final fun (kotlin/Long).<get-millimetersOfMercury>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.units/millimetersOfMercury.<get-millimetersOfMercury>|<get-millimetersOfMercury>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/ounces // com.viktormykhailiv.kmp.health.units/ounces|@kotlin.Double{}ounces[0]
    final fun (kotlin/Double).<get-ounces>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/ounces.<get-ounces>|<get-ounces>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/ounces // com.viktormykhailiv.kmp.health.units/ounces|@kotlin.Float{}ounces[0]
    final fun (kotlin/Float).<get-ounces>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/ounces.<get-ounces>|<get-ounces>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/ounces // com.viktormykhailiv.kmp.health.units/ounces|@kotlin.Int{}ounces[0]
    final fun (kotlin/Int).<get-ounces>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/ounces.<get-ounces>|<get-ounces>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/ounces // com.viktormykhailiv.kmp.health.units/ounces|@kotlin.Long{}ounces[0]
    final fun (kotlin/Long).<get-ounces>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/ounces.<get-ounces>|<get-ounces>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/percent // com.viktormykhailiv.kmp.health.units/percent|@kotlin.Double{}percent[0]
    final fun (kotlin/Double).<get-percent>(): com.viktormykhailiv.kmp.health.units/Percentage // com.viktormykhailiv.kmp.health.units/percent.<get-percent>|<get-percent>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/percent // com.viktormykhailiv.kmp.health.units/percent|@kotlin.Float{}percent[0]
    final fun (kotlin/Float).<get-percent>(): com.viktormykhailiv.kmp.health.units/Percentage // com.viktormykhailiv.kmp.health.units/percent.<get-percent>|<get-percent>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/percent // com.viktormykhailiv.kmp.health.units/percent|@kotlin.Int{}percent[0]
    final fun (kotlin/Int).<get-percent>(): com.viktormykhailiv.kmp.health.units/Percentage // com.viktormykhailiv.kmp.health.units/percent.<get-percent>|<get-percent>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/percent // com.viktormykhailiv.kmp.health.units/percent|@kotlin.Long{}percent[0]
    final fun (kotlin/Long).<get-percent>(): com.viktormykhailiv.kmp.health.units/Percentage // com.viktormykhailiv.kmp.health.units/percent.<get-percent>|<get-percent>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/pounds // com.viktormykhailiv.kmp.health.units/pounds|@kotlin.Double{}pounds[0]
    final fun (kotlin/Double).<get-pounds>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/pounds.<get-pounds>|<get-pounds>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/pounds // com.viktormykhailiv.kmp.health.units/pounds|@kotlin.Float{}pounds[0]
    final fun (kotlin/Float).<get-pounds>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/pounds.<get-pounds>|<get-pounds>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/pounds // com.viktormykhailiv.kmp.health.units/pounds|@kotlin.Int{}pounds[0]
    final fun (kotlin/Int).<get-pounds>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/pounds.<get-pounds>|<get-pounds>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/pounds // com.viktormykhailiv.kmp.health.units/pounds|@kotlin.Long{}pounds[0]
    final fun (kotlin/Long).<get-pounds>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/pounds.<get-pounds>|<get-pounds>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/watts // com.viktormykhailiv.kmp.health.units/watts|@kotlin.Double{}watts[0]
    final fun (kotlin/Double).<get-watts>(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.units/watts.<get-watts>|<get-watts>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/watts // com.viktormykhailiv.kmp.health.units/watts|@kotlin.Float{}watts[0]
    final fun (kotlin/Float).<get-watts>(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.units/watts.<get-watts>|<get-watts>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/watts // com.viktormykhailiv.kmp.health.units/watts|@kotlin.Int{}watts[0]
    final fun (kotlin/Int).<get-watts>(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.units/watts.<get-watts>|<get-watts>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/watts // com.viktormykhailiv.kmp.health.units/watts|@kotlin.Long{}watts[0]
    final fun (kotlin/Long).<get-watts>(): com.viktormykhailiv.kmp.health.units/Power // com.viktormykhailiv.kmp.health.units/watts.<get-watts>|<get-watts>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health/duration // com.viktormykhailiv.kmp.health/duration|@com.viktormykhailiv.kmp.health.IntervalRecord{}duration[0]
    final fun (com.viktormykhailiv.kmp.health/IntervalRecord).<get-duration>(): kotlin.time/Duration // com.viktormykhailiv.kmp.health/duration.<get-duration>|<get-duration>@com.viktormykhailiv.kmp.health.IntervalRecord(){}[0]

final fun (com.viktormykhailiv.kmp.health.records.metadata/Device.Companion).com.viktormykhailiv.kmp.health.records.metadata/getLocalDevice(): com.viktormykhailiv.kmp.health.records.metadata/Device // com.viktormykhailiv.kmp.health.records.metadata/getLocalDevice|getLocalDevice@com.viktormykhailiv.kmp.health.records.metadata.Device.Companion(){}[0]
final fun (com.viktormykhailiv.kmp.health.units/Temperature).com.viktormykhailiv.kmp.health.region/preferred(com.viktormykhailiv.kmp.health.region/TemperatureRegionalPreference): com.viktormykhailiv.kmp.health.units/Temperature // com.viktormykhailiv.kmp.health.region/preferred|preferred@com.viktormykhailiv.kmp.health.units.Temperature(com.viktormykhailiv.kmp.health.region.TemperatureRegionalPreference){}[0]
final fun (kotlin.time/Instant).com.viktormykhailiv.kmp.health/toNSDate(): platform.Foundation/NSDate // com.viktormykhailiv.kmp.health/toNSDate|toNSDate@kotlin.time.Instant(){}[0]
final fun (platform.Foundation/NSDate).com.viktormykhailiv.kmp.health/toKotlinInstant(): kotlin.time/Instant // com.viktormykhailiv.kmp.health/toKotlinInstant|toKotlinInstant@platform.Foundation.NSDate(){}[0]
final fun com.viktormykhailiv.kmp.health/generateManualEntryMetadata(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health/generateManualEntryMetadata|generateManualEntryMetadata(){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggegratePower(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord> // com.viktormykhailiv.kmp.health/aggegratePower|aggegratePower@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateBloodGlucose(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateBloodGlucose|aggregateBloodGlucose@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateBloodPressure(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateBloodPressure|aggregateBloodPressure@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateBodyFat(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateBodyFat|aggregateBodyFat@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateBodyTemperature(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateBodyTemperature|aggregateBodyTemperature@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateHeartRate(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateHeartRate|aggregateHeartRate@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateHeight(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateHeight|aggregateHeight@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateLeanBodyMass(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateLeanBodyMass|aggregateLeanBodyMass@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregatePedalingCadence(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregatePedalingCadence|aggregatePedalingCadence@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateSleep(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateSleep|aggregateSleep@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateSteps(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateSteps|aggregateSteps@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateWeight(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateWeight|aggregateWeight@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readBloodGlucose(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord>> // com.viktormykhailiv.kmp.health/readBloodGlucose|readBloodGlucose@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readBloodPressure(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/BloodPressureRecord>> // com.viktormykhailiv.kmp.health/readBloodPressure|readBloodPressure@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readBodyFat(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/BodyFatRecord>> // com.viktormykhailiv.kmp.health/readBodyFat|readBodyFat@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readBodyTemperature(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord>> // com.viktormykhailiv.kmp.health/readBodyTemperature|readBodyTemperature@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readExercise(kotlin.time/Instant, kotlin.time/Instant, com.viktormykhailiv.kmp.health/HealthDataType.Exercise = ...): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord>> // com.viktormykhailiv.kmp.health/readExercise|readExercise@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant;com.viktormykhailiv.kmp.health.HealthDataType.Exercise){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readHeartRate(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeartRateRecord>> // com.viktormykhailiv.kmp.health/readHeartRate|readHeartRate@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readHeight(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeightRecord>> // com.viktormykhailiv.kmp.health/readHeight|readHeight@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readLeanBodyMass(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord>> // com.viktormykhailiv.kmp.health/readLeanBodyMass|readLeanBodyMass@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readPedalingCadence(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord>> // com.viktormykhailiv.kmp.health/readPedalingCadence|readPedalingCadence@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readPower(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/PowerRecord>> // com.viktormykhailiv.kmp.health/readPower|readPower@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readSleep(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord>> // com.viktormykhailiv.kmp.health/readSleep|readSleep@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readSteps(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/StepsRecord>> // com.viktormykhailiv.kmp.health/readSteps|readSteps@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readWeight(kotlin.time/Instant, kotlin.time/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/WeightRecord>> // com.viktormykhailiv.kmp.health/readWeight|readWeight@com.viktormykhailiv.kmp.health.HealthManager(kotlin.time.Instant;kotlin.time.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateBloodGlucose(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/BloodGlucoseAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateBloodGlucose|aggregateBloodGlucose@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateBloodPressure(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateBloodPressure|aggregateBloodPressure@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateBodyFat(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/BodyFatAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateBodyFat|aggregateBodyFat@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateBodyTemperature(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/BodyTemperatureAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateBodyTemperature|aggregateBodyTemperature@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateHeartRate(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateHeartRate|aggregateHeartRate@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateHeight(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateHeight|aggregateHeight@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateLeanBodyMass(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/LeanBodyMassAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateLeanBodyMass|aggregateLeanBodyMass@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregatePedalingCadence(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/CyclingPedalingCadenceAggregatedRecord // com.viktormykhailiv.kmp.health/aggregatePedalingCadence|aggregatePedalingCadence@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregatePower(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/PowerAggregatedRecord // com.viktormykhailiv.kmp.health/aggregatePower|aggregatePower@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateSleep(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateSleep|aggregateSleep@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateSteps(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateSteps|aggregateSteps@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateWeight(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateWeight|aggregateWeight@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readBloodGlucose(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/BloodGlucoseRecord> // com.viktormykhailiv.kmp.health/readBloodGlucose|readBloodGlucose@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readBloodPressure(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/BloodPressureRecord> // com.viktormykhailiv.kmp.health/readBloodPressure|readBloodPressure@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readBodyFat(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/BodyFatRecord> // com.viktormykhailiv.kmp.health/readBodyFat|readBodyFat@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readBodyTemperature(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/BodyTemperatureRecord> // com.viktormykhailiv.kmp.health/readBodyTemperature|readBodyTemperature@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readExercise(platform.Foundation/NSDate, platform.Foundation/NSDate, com.viktormykhailiv.kmp.health/HealthDataType.Exercise = ...): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/ExerciseSessionRecord> // com.viktormykhailiv.kmp.health/readExercise|readExercise@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate;com.viktormykhailiv.kmp.health.HealthDataType.Exercise){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readHeartRage(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeartRateRecord> // com.viktormykhailiv.kmp.health/readHeartRage|readHeartRage@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readHeight(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeightRecord> // com.viktormykhailiv.kmp.health/readHeight|readHeight@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readLeanBodyMass(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/LeanBodyMassRecord> // com.viktormykhailiv.kmp.health/readLeanBodyMass|readLeanBodyMass@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readPedalingCadence(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/CyclingPedalingCadenceRecord> // com.viktormykhailiv.kmp.health/readPedalingCadence|readPedalingCadence@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readPower(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/PowerRecord> // com.viktormykhailiv.kmp.health/readPower|readPower@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readSleep(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord> // com.viktormykhailiv.kmp.health/readSleep|readSleep@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readSteps(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/StepsRecord> // com.viktormykhailiv.kmp.health/readSteps|readSteps@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readWeight(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/WeightRecord> // com.viktormykhailiv.kmp.health/readWeight|readWeight@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
